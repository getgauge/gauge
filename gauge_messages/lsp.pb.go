// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lsp.proto

package gauge_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty is a blank response, to be used when there is no return expected.
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_lsp_b0faf861d48ddea9, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "gauge.messages.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LspServiceClient is the client API for LspService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LspServiceClient interface {
	GetStepNames(ctx context.Context, in *StepNamesRequest, opts ...grpc.CallOption) (*StepNamesResponse, error)
	CacheFile(ctx context.Context, in *CacheFileRequest, opts ...grpc.CallOption) (*Empty, error)
	GetStepPositions(ctx context.Context, in *StepPositionsRequest, opts ...grpc.CallOption) (*StepPositionsResponse, error)
	GetImplementationFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImplementationFileListResponse, error)
	ImplementStub(ctx context.Context, in *StubImplementationCodeRequest, opts ...grpc.CallOption) (*FileDiff, error)
	ValidateStep(ctx context.Context, in *StepValidateRequest, opts ...grpc.CallOption) (*StepValidateResponse, error)
	Refactor(ctx context.Context, in *RefactorRequest, opts ...grpc.CallOption) (*RefactorResponse, error)
	GetStepName(ctx context.Context, in *StepNameRequest, opts ...grpc.CallOption) (*StepNameResponse, error)
	GetGlobPatterns(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImplementationFileGlobPatternResponse, error)
	KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*Empty, error)
}

type lspServiceClient struct {
	cc *grpc.ClientConn
}

func NewLspServiceClient(cc *grpc.ClientConn) LspServiceClient {
	return &lspServiceClient{cc}
}

func (c *lspServiceClient) GetStepNames(ctx context.Context, in *StepNamesRequest, opts ...grpc.CallOption) (*StepNamesResponse, error) {
	out := new(StepNamesResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/GetStepNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) CacheFile(ctx context.Context, in *CacheFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/CacheFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) GetStepPositions(ctx context.Context, in *StepPositionsRequest, opts ...grpc.CallOption) (*StepPositionsResponse, error) {
	out := new(StepPositionsResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/GetStepPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) GetImplementationFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImplementationFileListResponse, error) {
	out := new(ImplementationFileListResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/GetImplementationFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) ImplementStub(ctx context.Context, in *StubImplementationCodeRequest, opts ...grpc.CallOption) (*FileDiff, error) {
	out := new(FileDiff)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/ImplementStub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) ValidateStep(ctx context.Context, in *StepValidateRequest, opts ...grpc.CallOption) (*StepValidateResponse, error) {
	out := new(StepValidateResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/ValidateStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) Refactor(ctx context.Context, in *RefactorRequest, opts ...grpc.CallOption) (*RefactorResponse, error) {
	out := new(RefactorResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/Refactor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) GetStepName(ctx context.Context, in *StepNameRequest, opts ...grpc.CallOption) (*StepNameResponse, error) {
	out := new(StepNameResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/GetStepName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) GetGlobPatterns(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImplementationFileGlobPatternResponse, error) {
	out := new(ImplementationFileGlobPatternResponse)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/GetGlobPatterns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lspServiceClient) KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gauge.messages.lspService/KillProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LspServiceServer is the server API for LspService service.
type LspServiceServer interface {
	GetStepNames(context.Context, *StepNamesRequest) (*StepNamesResponse, error)
	CacheFile(context.Context, *CacheFileRequest) (*Empty, error)
	GetStepPositions(context.Context, *StepPositionsRequest) (*StepPositionsResponse, error)
	GetImplementationFiles(context.Context, *Empty) (*ImplementationFileListResponse, error)
	ImplementStub(context.Context, *StubImplementationCodeRequest) (*FileDiff, error)
	ValidateStep(context.Context, *StepValidateRequest) (*StepValidateResponse, error)
	Refactor(context.Context, *RefactorRequest) (*RefactorResponse, error)
	GetStepName(context.Context, *StepNameRequest) (*StepNameResponse, error)
	GetGlobPatterns(context.Context, *Empty) (*ImplementationFileGlobPatternResponse, error)
	KillProcess(context.Context, *KillProcessRequest) (*Empty, error)
}

func RegisterLspServiceServer(s *grpc.Server, srv LspServiceServer) {
	s.RegisterService(&_LspService_serviceDesc, srv)
}

func _LspService_GetStepNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).GetStepNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/GetStepNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).GetStepNames(ctx, req.(*StepNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_CacheFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).CacheFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/CacheFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).CacheFile(ctx, req.(*CacheFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_GetStepPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).GetStepPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/GetStepPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).GetStepPositions(ctx, req.(*StepPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_GetImplementationFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).GetImplementationFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/GetImplementationFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).GetImplementationFiles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_ImplementStub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StubImplementationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).ImplementStub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/ImplementStub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).ImplementStub(ctx, req.(*StubImplementationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_ValidateStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).ValidateStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/ValidateStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).ValidateStep(ctx, req.(*StepValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_Refactor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefactorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).Refactor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/Refactor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).Refactor(ctx, req.(*RefactorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_GetStepName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).GetStepName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/GetStepName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).GetStepName(ctx, req.(*StepNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_GetGlobPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).GetGlobPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/GetGlobPatterns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).GetGlobPatterns(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LspService_KillProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LspServiceServer).KillProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gauge.messages.lspService/KillProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LspServiceServer).KillProcess(ctx, req.(*KillProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LspService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gauge.messages.lspService",
	HandlerType: (*LspServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStepNames",
			Handler:    _LspService_GetStepNames_Handler,
		},
		{
			MethodName: "CacheFile",
			Handler:    _LspService_CacheFile_Handler,
		},
		{
			MethodName: "GetStepPositions",
			Handler:    _LspService_GetStepPositions_Handler,
		},
		{
			MethodName: "GetImplementationFiles",
			Handler:    _LspService_GetImplementationFiles_Handler,
		},
		{
			MethodName: "ImplementStub",
			Handler:    _LspService_ImplementStub_Handler,
		},
		{
			MethodName: "ValidateStep",
			Handler:    _LspService_ValidateStep_Handler,
		},
		{
			MethodName: "Refactor",
			Handler:    _LspService_Refactor_Handler,
		},
		{
			MethodName: "GetStepName",
			Handler:    _LspService_GetStepName_Handler,
		},
		{
			MethodName: "GetGlobPatterns",
			Handler:    _LspService_GetGlobPatterns_Handler,
		},
		{
			MethodName: "KillProcess",
			Handler:    _LspService_KillProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lsp.proto",
}

func init() { proto.RegisterFile("lsp.proto", fileDescriptor_lsp_b0faf861d48ddea9) }

var fileDescriptor_lsp_b0faf861d48ddea9 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcd, 0x6e, 0xda, 0x40,
	0x14, 0x85, 0xa5, 0x4a, 0xa5, 0x65, 0xa0, 0xb4, 0x1a, 0xa9, 0xa8, 0x62, 0x53, 0x4a, 0xe9, 0xa2,
	0x8b, 0x7a, 0xd1, 0xaa, 0x2f, 0x50, 0x68, 0x9c, 0x28, 0x21, 0xb2, 0xb0, 0x14, 0x25, 0x2b, 0x34,
	0x36, 0x17, 0x33, 0xca, 0xd8, 0xe3, 0xf8, 0x5e, 0x27, 0xca, 0x2b, 0xe5, 0xd1, 0xf2, 0x14, 0x91,
	0xc1, 0x33, 0x01, 0x9b, 0x9f, 0x9d, 0xe5, 0x73, 0xee, 0x77, 0xce, 0xf8, 0x8e, 0x59, 0x53, 0x61,
	0xea, 0xa4, 0x99, 0x26, 0xcd, 0x3b, 0x91, 0xc8, 0x23, 0x70, 0x62, 0x40, 0x14, 0x11, 0x60, 0xaf,
	0x63, 0x9e, 0xd6, 0xfa, 0xe0, 0x1d, 0x7b, 0xfb, 0x3f, 0x4e, 0xe9, 0xf1, 0xf7, 0x73, 0x83, 0x31,
	0x85, 0xa9, 0x0f, 0xd9, 0xbd, 0x0c, 0x81, 0xfb, 0xac, 0xed, 0x02, 0xf9, 0x04, 0xe9, 0xa5, 0x88,
	0x01, 0x79, 0xdf, 0xd9, 0x06, 0x39, 0x56, 0x9a, 0xc2, 0x5d, 0x0e, 0x48, 0xbd, 0x6f, 0x07, 0x1c,
	0x98, 0xea, 0x04, 0x81, 0x8f, 0x59, 0x73, 0x24, 0xc2, 0x25, 0x9c, 0x48, 0x05, 0x75, 0xa2, 0x95,
	0x0c, 0xf1, 0x73, 0xd5, 0xb1, 0x6a, 0xca, 0x67, 0xec, 0x53, 0x59, 0xcd, 0xd3, 0x28, 0x49, 0xea,
	0x04, 0xf9, 0x70, 0x57, 0xb8, 0x95, 0x0d, 0xf0, 0xc7, 0x11, 0x57, 0x59, 0x73, 0xc6, 0xba, 0x2e,
	0xd0, 0x59, 0x9c, 0x2a, 0x88, 0x21, 0x21, 0x51, 0xa8, 0x45, 0x2f, 0xe4, 0xbb, 0x1b, 0xf5, 0x9c,
	0xea, 0xeb, 0xfa, 0xec, 0x85, 0x44, 0xb2, 0x01, 0xd7, 0xec, 0x83, 0x75, 0xf8, 0x94, 0x07, 0xfc,
	0x57, 0xbd, 0x58, 0x1e, 0x6c, 0x43, 0x46, 0x7a, 0x6e, 0x3f, 0xcc, 0x97, 0xaa, 0xbd, 0x48, 0x18,
	0xcb, 0xc5, 0x82, 0xdf, 0xb0, 0xf6, 0x95, 0x50, 0x72, 0x2e, 0x08, 0x8a, 0xb3, 0xf1, 0xef, 0xbb,
	0x4e, 0x6c, 0x1c, 0x06, 0x37, 0x3c, 0x6c, 0x2a, 0x4b, 0x4f, 0xd8, 0xfb, 0x29, 0x2c, 0x44, 0x48,
	0x3a, 0xe3, 0x5f, 0xab, 0x13, 0x46, 0x31, 0xc8, 0xfe, 0x7e, 0x43, 0x89, 0xf3, 0x58, 0x6b, 0xe3,
	0x82, 0xd5, 0x89, 0x46, 0xd9, 0x4b, 0x7c, 0x35, 0xd8, 0xb5, 0x7d, 0x74, 0x81, 0x5c, 0xa5, 0x03,
	0x4f, 0x10, 0x41, 0x96, 0xec, 0xdd, 0xd7, 0xdf, 0xe3, 0xfb, 0xda, 0xc0, 0xd8, 0x80, 0x53, 0xd6,
	0x3a, 0x97, 0x4a, 0x79, 0x99, 0x0e, 0x01, 0x91, 0x0f, 0xaa, 0x94, 0x0d, 0xf1, 0xf0, 0x15, 0xfe,
	0xf7, 0x93, 0x75, 0x43, 0x1d, 0x3b, 0xb4, 0xd4, 0x79, 0xb4, 0xa4, 0x07, 0x9d, 0xdd, 0xe2, 0xda,
	0xf8, 0xf4, 0xa6, 0xe3, 0xae, 0x06, 0x26, 0xe5, 0x40, 0xd0, 0x58, 0xfd, 0xa7, 0x7f, 0x5e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x5f, 0x3f, 0x97, 0x76, 0xd4, 0x03, 0x00, 0x00,
}
