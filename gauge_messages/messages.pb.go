// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

package gauge_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StepValidateResponse_ErrorType int32

const (
	StepValidateResponse_STEP_IMPLEMENTATION_NOT_FOUND StepValidateResponse_ErrorType = 0
	StepValidateResponse_DUPLICATE_STEP_IMPLEMENTATION StepValidateResponse_ErrorType = 1
)

var StepValidateResponse_ErrorType_name = map[int32]string{
	0: "STEP_IMPLEMENTATION_NOT_FOUND",
	1: "DUPLICATE_STEP_IMPLEMENTATION",
}
var StepValidateResponse_ErrorType_value = map[string]int32{
	"STEP_IMPLEMENTATION_NOT_FOUND": 0,
	"DUPLICATE_STEP_IMPLEMENTATION": 1,
}

func (x StepValidateResponse_ErrorType) String() string {
	return proto.EnumName(StepValidateResponse_ErrorType_name, int32(x))
}
func (StepValidateResponse_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{16, 0}
}

type Message_MessageType int32

const (
	Message_ExecutionStarting              Message_MessageType = 0
	Message_SpecExecutionStarting          Message_MessageType = 1
	Message_SpecExecutionEnding            Message_MessageType = 2
	Message_ScenarioExecutionStarting      Message_MessageType = 3
	Message_ScenarioExecutionEnding        Message_MessageType = 4
	Message_StepExecutionStarting          Message_MessageType = 5
	Message_StepExecutionEnding            Message_MessageType = 6
	Message_ExecuteStep                    Message_MessageType = 7
	Message_ExecutionEnding                Message_MessageType = 8
	Message_StepValidateRequest            Message_MessageType = 9
	Message_StepValidateResponse           Message_MessageType = 10
	Message_ExecutionStatusResponse        Message_MessageType = 11
	Message_StepNamesRequest               Message_MessageType = 12
	Message_StepNamesResponse              Message_MessageType = 13
	Message_KillProcessRequest             Message_MessageType = 14
	Message_SuiteExecutionResult           Message_MessageType = 15
	Message_ScenarioDataStoreInit          Message_MessageType = 16
	Message_SpecDataStoreInit              Message_MessageType = 17
	Message_SuiteDataStoreInit             Message_MessageType = 18
	Message_StepNameRequest                Message_MessageType = 19
	Message_StepNameResponse               Message_MessageType = 20
	Message_RefactorRequest                Message_MessageType = 21
	Message_RefactorResponse               Message_MessageType = 22
	Message_UnsupportedMessageResponse     Message_MessageType = 23
	Message_CacheFileRequest               Message_MessageType = 24
	Message_StepPositionsRequest           Message_MessageType = 25
	Message_StepPositionsResponse          Message_MessageType = 26
	Message_ImplementationFileListRequest  Message_MessageType = 27
	Message_ImplementationFileListResponse Message_MessageType = 28
	Message_StubImplementationCodeRequest  Message_MessageType = 29
	Message_FileChanges                    Message_MessageType = 30
)

var Message_MessageType_name = map[int32]string{
	0:  "ExecutionStarting",
	1:  "SpecExecutionStarting",
	2:  "SpecExecutionEnding",
	3:  "ScenarioExecutionStarting",
	4:  "ScenarioExecutionEnding",
	5:  "StepExecutionStarting",
	6:  "StepExecutionEnding",
	7:  "ExecuteStep",
	8:  "ExecutionEnding",
	9:  "StepValidateRequest",
	10: "StepValidateResponse",
	11: "ExecutionStatusResponse",
	12: "StepNamesRequest",
	13: "StepNamesResponse",
	14: "KillProcessRequest",
	15: "SuiteExecutionResult",
	16: "ScenarioDataStoreInit",
	17: "SpecDataStoreInit",
	18: "SuiteDataStoreInit",
	19: "StepNameRequest",
	20: "StepNameResponse",
	21: "RefactorRequest",
	22: "RefactorResponse",
	23: "UnsupportedMessageResponse",
	24: "CacheFileRequest",
	25: "StepPositionsRequest",
	26: "StepPositionsResponse",
	27: "ImplementationFileListRequest",
	28: "ImplementationFileListResponse",
	29: "StubImplementationCodeRequest",
	30: "FileChanges",
}
var Message_MessageType_value = map[string]int32{
	"ExecutionStarting":              0,
	"SpecExecutionStarting":          1,
	"SpecExecutionEnding":            2,
	"ScenarioExecutionStarting":      3,
	"ScenarioExecutionEnding":        4,
	"StepExecutionStarting":          5,
	"StepExecutionEnding":            6,
	"ExecuteStep":                    7,
	"ExecutionEnding":                8,
	"StepValidateRequest":            9,
	"StepValidateResponse":           10,
	"ExecutionStatusResponse":        11,
	"StepNamesRequest":               12,
	"StepNamesResponse":              13,
	"KillProcessRequest":             14,
	"SuiteExecutionResult":           15,
	"ScenarioDataStoreInit":          16,
	"SpecDataStoreInit":              17,
	"SuiteDataStoreInit":             18,
	"StepNameRequest":                19,
	"StepNameResponse":               20,
	"RefactorRequest":                21,
	"RefactorResponse":               22,
	"UnsupportedMessageResponse":     23,
	"CacheFileRequest":               24,
	"StepPositionsRequest":           25,
	"StepPositionsResponse":          26,
	"ImplementationFileListRequest":  27,
	"ImplementationFileListResponse": 28,
	"StubImplementationCodeRequest":  29,
	"FileChanges":                    30,
}

func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}
func (Message_MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{36, 0} }

// / Default request. Tells the runner to shutdown.
type KillProcessRequest struct {
}

func (m *KillProcessRequest) Reset()                    { *m = KillProcessRequest{} }
func (m *KillProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*KillProcessRequest) ProtoMessage()               {}
func (*KillProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// / Sends to any request which needs a execution status as response
// / usually step execution, hooks etc will return this
type ExecutionStatusResponse struct {
	ExecutionResult *ProtoExecutionResult `protobuf:"bytes,1,opt,name=executionResult" json:"executionResult,omitempty"`
}

func (m *ExecutionStatusResponse) Reset()                    { *m = ExecutionStatusResponse{} }
func (m *ExecutionStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutionStatusResponse) ProtoMessage()               {}
func (*ExecutionStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ExecutionStatusResponse) GetExecutionResult() *ProtoExecutionResult {
	if m != nil {
		return m.ExecutionResult
	}
	return nil
}

// / Sent at start of Suite Execution. Tells the runner to execute `before_suite` hook.
type ExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ExecutionStartingRequest) Reset()                    { *m = ExecutionStartingRequest{} }
func (m *ExecutionStartingRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionStartingRequest) ProtoMessage()               {}
func (*ExecutionStartingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Suite Execution. Tells the runner to execute `after_suite` hook.
type ExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ExecutionEndingRequest) Reset()                    { *m = ExecutionEndingRequest{} }
func (m *ExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionEndingRequest) ProtoMessage()               {}
func (*ExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at start of Spec Execution. Tells the runner to execute `before_spec` hook.
type SpecExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *SpecExecutionStartingRequest) Reset()                    { *m = SpecExecutionStartingRequest{} }
func (m *SpecExecutionStartingRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecExecutionStartingRequest) ProtoMessage()               {}
func (*SpecExecutionStartingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SpecExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Spec Execution. Tells the runner to execute `after_spec` hook.
type SpecExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *SpecExecutionEndingRequest) Reset()                    { *m = SpecExecutionEndingRequest{} }
func (m *SpecExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecExecutionEndingRequest) ProtoMessage()               {}
func (*SpecExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SpecExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at start of Scenario Execution. Tells the runner to execute `before_scenario` hook.
type ScenarioExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ScenarioExecutionStartingRequest) Reset()         { *m = ScenarioExecutionStartingRequest{} }
func (m *ScenarioExecutionStartingRequest) String() string { return proto.CompactTextString(m) }
func (*ScenarioExecutionStartingRequest) ProtoMessage()    {}
func (*ScenarioExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{6}
}

func (m *ScenarioExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Scenario Execution. Tells the runner to execute `after_scenario` hook.
type ScenarioExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ScenarioExecutionEndingRequest) Reset()                    { *m = ScenarioExecutionEndingRequest{} }
func (m *ScenarioExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*ScenarioExecutionEndingRequest) ProtoMessage()               {}
func (*ScenarioExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ScenarioExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at start of Step Execution. Tells the runner to execute `before_step` hook.
type StepExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *StepExecutionStartingRequest) Reset()                    { *m = StepExecutionStartingRequest{} }
func (m *StepExecutionStartingRequest) String() string            { return proto.CompactTextString(m) }
func (*StepExecutionStartingRequest) ProtoMessage()               {}
func (*StepExecutionStartingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *StepExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Step Execution. Tells the runner to execute `after_step` hook.
type StepExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *StepExecutionEndingRequest) Reset()                    { *m = StepExecutionEndingRequest{} }
func (m *StepExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*StepExecutionEndingRequest) ProtoMessage()               {}
func (*StepExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *StepExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Contains details of the execution.
// / Depending on the context (Step, Scenario, Spec or Suite), the respective fields are set.
type ExecutionInfo struct {
	// / Holds the information of the current Spec. Valid in context of Spec execution.
	CurrentSpec *SpecInfo `protobuf:"bytes,1,opt,name=currentSpec" json:"currentSpec,omitempty"`
	// / Holds the information of the current Scenario. Valid in context of Scenario execution.
	CurrentScenario *ScenarioInfo `protobuf:"bytes,2,opt,name=currentScenario" json:"currentScenario,omitempty"`
	// / Holds the information of the current Step. Valid in context of Step execution.
	CurrentStep *StepInfo `protobuf:"bytes,3,opt,name=currentStep" json:"currentStep,omitempty"`
	// / Stacktrace of the execution. Valid only if there is an error in execution.
	Stacktrace string `protobuf:"bytes,4,opt,name=stacktrace" json:"stacktrace,omitempty"`
}

func (m *ExecutionInfo) Reset()                    { *m = ExecutionInfo{} }
func (m *ExecutionInfo) String() string            { return proto.CompactTextString(m) }
func (*ExecutionInfo) ProtoMessage()               {}
func (*ExecutionInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ExecutionInfo) GetCurrentSpec() *SpecInfo {
	if m != nil {
		return m.CurrentSpec
	}
	return nil
}

func (m *ExecutionInfo) GetCurrentScenario() *ScenarioInfo {
	if m != nil {
		return m.CurrentScenario
	}
	return nil
}

func (m *ExecutionInfo) GetCurrentStep() *StepInfo {
	if m != nil {
		return m.CurrentStep
	}
	return nil
}

func (m *ExecutionInfo) GetStacktrace() string {
	if m != nil {
		return m.Stacktrace
	}
	return ""
}

// / Contains details of the Spec execution.
type SpecInfo struct {
	// / Name of the current Spec being executed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// / Full File path containing the current Spec being executed.
	FileName string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	// / Flag to indicate if the current Spec execution failed.
	IsFailed bool `protobuf:"varint,3,opt,name=isFailed" json:"isFailed,omitempty"`
	// / Tags relevant to the current Spec execution.
	Tags []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *SpecInfo) Reset()                    { *m = SpecInfo{} }
func (m *SpecInfo) String() string            { return proto.CompactTextString(m) }
func (*SpecInfo) ProtoMessage()               {}
func (*SpecInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpecInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SpecInfo) GetIsFailed() bool {
	if m != nil {
		return m.IsFailed
	}
	return false
}

func (m *SpecInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// / Contains details of the Scenario execution.
type ScenarioInfo struct {
	// / Name of the current Scenario being executed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// / Flag to indicate if the current Scenario execution failed.
	IsFailed bool `protobuf:"varint,2,opt,name=isFailed" json:"isFailed,omitempty"`
	// / Tags relevant to the current Scenario execution.
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *ScenarioInfo) Reset()                    { *m = ScenarioInfo{} }
func (m *ScenarioInfo) String() string            { return proto.CompactTextString(m) }
func (*ScenarioInfo) ProtoMessage()               {}
func (*ScenarioInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ScenarioInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScenarioInfo) GetIsFailed() bool {
	if m != nil {
		return m.IsFailed
	}
	return false
}

func (m *ScenarioInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// / Contains details of the Step execution.
type StepInfo struct {
	// / The current request to execute Step
	Step *ExecuteStepRequest `protobuf:"bytes,1,opt,name=step" json:"step,omitempty"`
	// / Flag to indicate if the current Step execution failed.
	IsFailed bool `protobuf:"varint,2,opt,name=isFailed" json:"isFailed,omitempty"`
	// / The current stack trace in case of failure
	StackTrace string `protobuf:"bytes,3,opt,name=stackTrace" json:"stackTrace,omitempty"`
	// / The error message in case of failure
	ErrorMessage string `protobuf:"bytes,4,opt,name=errorMessage" json:"errorMessage,omitempty"`
}

func (m *StepInfo) Reset()                    { *m = StepInfo{} }
func (m *StepInfo) String() string            { return proto.CompactTextString(m) }
func (*StepInfo) ProtoMessage()               {}
func (*StepInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *StepInfo) GetStep() *ExecuteStepRequest {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *StepInfo) GetIsFailed() bool {
	if m != nil {
		return m.IsFailed
	}
	return false
}

func (m *StepInfo) GetStackTrace() string {
	if m != nil {
		return m.StackTrace
	}
	return ""
}

func (m *StepInfo) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// / Request sent ot the runner to Execute a Step
type ExecuteStepRequest struct {
	// / Contains the actual text of the Step being executed.
	// / This contains the parameters as defined in the Spec.
	ActualStepText string `protobuf:"bytes,1,opt,name=actualStepText" json:"actualStepText,omitempty"`
	// / Contains the parsed text of the Step being executed.
	// / The paramters are replaced with placeholders.
	ParsedStepText string `protobuf:"bytes,2,opt,name=parsedStepText" json:"parsedStepText,omitempty"`
	// / Flag to indicate if the execution of the Scenario, containing the current Step, failed.
	ScenarioFailing bool `protobuf:"varint,3,opt,name=scenarioFailing" json:"scenarioFailing,omitempty"`
	// / Collection of parameters applicable to the current Step.
	Parameters []*Parameter `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ExecuteStepRequest) Reset()                    { *m = ExecuteStepRequest{} }
func (m *ExecuteStepRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteStepRequest) ProtoMessage()               {}
func (*ExecuteStepRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *ExecuteStepRequest) GetActualStepText() string {
	if m != nil {
		return m.ActualStepText
	}
	return ""
}

func (m *ExecuteStepRequest) GetParsedStepText() string {
	if m != nil {
		return m.ParsedStepText
	}
	return ""
}

func (m *ExecuteStepRequest) GetScenarioFailing() bool {
	if m != nil {
		return m.ScenarioFailing
	}
	return false
}

func (m *ExecuteStepRequest) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// / Request sent ot the runner to check if given Step is valid.
// / The runner should check if there is an implementation defined for the given Step Text.
type StepValidateRequest struct {
	// / The text is used to lookup Step implementation
	StepText string `protobuf:"bytes,1,opt,name=stepText" json:"stepText,omitempty"`
	// / The number of paramters in the Step
	NumberOfParameters int32 `protobuf:"varint,2,opt,name=numberOfParameters" json:"numberOfParameters,omitempty"`
	// /This is use to generate step implementation template
	StepValue *ProtoStepValue `protobuf:"bytes,3,opt,name=stepValue" json:"stepValue,omitempty"`
}

func (m *StepValidateRequest) Reset()                    { *m = StepValidateRequest{} }
func (m *StepValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*StepValidateRequest) ProtoMessage()               {}
func (*StepValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *StepValidateRequest) GetStepText() string {
	if m != nil {
		return m.StepText
	}
	return ""
}

func (m *StepValidateRequest) GetNumberOfParameters() int32 {
	if m != nil {
		return m.NumberOfParameters
	}
	return 0
}

func (m *StepValidateRequest) GetStepValue() *ProtoStepValue {
	if m != nil {
		return m.StepValue
	}
	return nil
}

// / Response of StepValidateRequest.
// / The runner tells the caller if the Request was valid,
// / i.e. an implementation exists for given Step text.
// / Returns an error message if it is an error response.
type StepValidateResponse struct {
	IsValid      bool                           `protobuf:"varint,1,opt,name=isValid" json:"isValid,omitempty"`
	ErrorMessage string                         `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
	ErrorType    StepValidateResponse_ErrorType `protobuf:"varint,3,opt,name=errorType,enum=gauge.messages.StepValidateResponse_ErrorType" json:"errorType,omitempty"`
	Suggestion   string                         `protobuf:"bytes,4,opt,name=suggestion" json:"suggestion,omitempty"`
}

func (m *StepValidateResponse) Reset()                    { *m = StepValidateResponse{} }
func (m *StepValidateResponse) String() string            { return proto.CompactTextString(m) }
func (*StepValidateResponse) ProtoMessage()               {}
func (*StepValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *StepValidateResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *StepValidateResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *StepValidateResponse) GetErrorType() StepValidateResponse_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return StepValidateResponse_STEP_IMPLEMENTATION_NOT_FOUND
}

func (m *StepValidateResponse) GetSuggestion() string {
	if m != nil {
		return m.Suggestion
	}
	return ""
}

// / Result of the Suite Execution.
type SuiteExecutionResult struct {
	SuiteResult *ProtoSuiteResult `protobuf:"bytes,1,opt,name=suiteResult" json:"suiteResult,omitempty"`
}

func (m *SuiteExecutionResult) Reset()                    { *m = SuiteExecutionResult{} }
func (m *SuiteExecutionResult) String() string            { return proto.CompactTextString(m) }
func (*SuiteExecutionResult) ProtoMessage()               {}
func (*SuiteExecutionResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *SuiteExecutionResult) GetSuiteResult() *ProtoSuiteResult {
	if m != nil {
		return m.SuiteResult
	}
	return nil
}

// / Requests Gauge to give all Step Names.
type StepNamesRequest struct {
}

func (m *StepNamesRequest) Reset()                    { *m = StepNamesRequest{} }
func (m *StepNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*StepNamesRequest) ProtoMessage()               {}
func (*StepNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

// / Response to StepNamesRequest
type StepNamesResponse struct {
	// / Collection of strings corresponding to Step texts.
	Steps []string `protobuf:"bytes,1,rep,name=steps" json:"steps,omitempty"`
}

func (m *StepNamesResponse) Reset()                    { *m = StepNamesResponse{} }
func (m *StepNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*StepNamesResponse) ProtoMessage()               {}
func (*StepNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *StepNamesResponse) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

// / Request runner to initialize Scenario DataStore
// / Scenario Datastore is reset after every Scenario execution.
type ScenarioDataStoreInitRequest struct {
}

func (m *ScenarioDataStoreInitRequest) Reset()                    { *m = ScenarioDataStoreInitRequest{} }
func (m *ScenarioDataStoreInitRequest) String() string            { return proto.CompactTextString(m) }
func (*ScenarioDataStoreInitRequest) ProtoMessage()               {}
func (*ScenarioDataStoreInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

// / Request runner to initialize Spec DataStore
// / Spec Datastore is reset after every Spec execution.
type SpecDataStoreInitRequest struct {
}

func (m *SpecDataStoreInitRequest) Reset()                    { *m = SpecDataStoreInitRequest{} }
func (m *SpecDataStoreInitRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecDataStoreInitRequest) ProtoMessage()               {}
func (*SpecDataStoreInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

// / Request runner to initialize Suite DataStore
// / Suite Datastore is reset after every Suite execution.
type SuiteDataStoreInitRequest struct {
}

func (m *SuiteDataStoreInitRequest) Reset()                    { *m = SuiteDataStoreInitRequest{} }
func (m *SuiteDataStoreInitRequest) String() string            { return proto.CompactTextString(m) }
func (*SuiteDataStoreInitRequest) ProtoMessage()               {}
func (*SuiteDataStoreInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

// / Holds the new and old positions of a parameter.
// / Used when refactoring a Step.
type ParameterPosition struct {
	OldPosition int32 `protobuf:"varint,1,opt,name=oldPosition" json:"oldPosition,omitempty"`
	NewPosition int32 `protobuf:"varint,2,opt,name=newPosition" json:"newPosition,omitempty"`
}

func (m *ParameterPosition) Reset()                    { *m = ParameterPosition{} }
func (m *ParameterPosition) String() string            { return proto.CompactTextString(m) }
func (*ParameterPosition) ProtoMessage()               {}
func (*ParameterPosition) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *ParameterPosition) GetOldPosition() int32 {
	if m != nil {
		return m.OldPosition
	}
	return 0
}

func (m *ParameterPosition) GetNewPosition() int32 {
	if m != nil {
		return m.NewPosition
	}
	return 0
}

// / Tells the runner to refactor the specified Step.
type RefactorRequest struct {
	// / Old value, used to lookup Step to refactor
	OldStepValue *ProtoStepValue `protobuf:"bytes,1,opt,name=oldStepValue" json:"oldStepValue,omitempty"`
	// / New value, the to-be value of Step being refactored.
	NewStepValue *ProtoStepValue `protobuf:"bytes,2,opt,name=newStepValue" json:"newStepValue,omitempty"`
	// / Holds parameter positions of all parameters. Contains old and new parameter positions.
	ParamPositions []*ParameterPosition `protobuf:"bytes,3,rep,name=paramPositions" json:"paramPositions,omitempty"`
	// / If set to true, the refactored files should be saved to the file system before returning the response.
	SaveChanges bool `protobuf:"varint,4,opt,name=saveChanges" json:"saveChanges,omitempty"`
}

func (m *RefactorRequest) Reset()                    { *m = RefactorRequest{} }
func (m *RefactorRequest) String() string            { return proto.CompactTextString(m) }
func (*RefactorRequest) ProtoMessage()               {}
func (*RefactorRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *RefactorRequest) GetOldStepValue() *ProtoStepValue {
	if m != nil {
		return m.OldStepValue
	}
	return nil
}

func (m *RefactorRequest) GetNewStepValue() *ProtoStepValue {
	if m != nil {
		return m.NewStepValue
	}
	return nil
}

func (m *RefactorRequest) GetParamPositions() []*ParameterPosition {
	if m != nil {
		return m.ParamPositions
	}
	return nil
}

func (m *RefactorRequest) GetSaveChanges() bool {
	if m != nil {
		return m.SaveChanges
	}
	return false
}

// / Give all file changes to be made to file system
type FileChanges struct {
	FileName    string `protobuf:"bytes,1,opt,name=fileName" json:"fileName,omitempty"`
	FileContent string `protobuf:"bytes,2,opt,name=fileContent" json:"fileContent,omitempty"`
}

func (m *FileChanges) Reset()                    { *m = FileChanges{} }
func (m *FileChanges) String() string            { return proto.CompactTextString(m) }
func (*FileChanges) ProtoMessage()               {}
func (*FileChanges) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *FileChanges) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileChanges) GetFileContent() string {
	if m != nil {
		return m.FileContent
	}
	return ""
}

// / Response of a RefactorRequest
type RefactorResponse struct {
	// / Flag indicating the success of Refactor operation.
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// / Error message, valid only if Refactor wasn't successful
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// / List of files that were affected because of the refactoring.
	FilesChanged []string `protobuf:"bytes,3,rep,name=filesChanged" json:"filesChanged,omitempty"`
	// / List of file changes to be made to successfully achieve refactoring.
	FileChanges []*FileChanges `protobuf:"bytes,4,rep,name=fileChanges" json:"fileChanges,omitempty"`
}

func (m *RefactorResponse) Reset()                    { *m = RefactorResponse{} }
func (m *RefactorResponse) String() string            { return proto.CompactTextString(m) }
func (*RefactorResponse) ProtoMessage()               {}
func (*RefactorResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *RefactorResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RefactorResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RefactorResponse) GetFilesChanged() []string {
	if m != nil {
		return m.FilesChanged
	}
	return nil
}

func (m *RefactorResponse) GetFileChanges() []*FileChanges {
	if m != nil {
		return m.FileChanges
	}
	return nil
}

// / Request for details on a Single Step.
type StepNameRequest struct {
	// / Step text to lookup the Step.
	// / This is the parsed step value, i.e. with placeholders for parameters.
	StepValue string `protobuf:"bytes,1,opt,name=stepValue" json:"stepValue,omitempty"`
}

func (m *StepNameRequest) Reset()                    { *m = StepNameRequest{} }
func (m *StepNameRequest) String() string            { return proto.CompactTextString(m) }
func (*StepNameRequest) ProtoMessage()               {}
func (*StepNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *StepNameRequest) GetStepValue() string {
	if m != nil {
		return m.StepValue
	}
	return ""
}

// / Response to StepNameRequest.
type StepNameResponse struct {
	// / Flag indicating if there is a match for the given Step Text.
	IsStepPresent bool `protobuf:"varint,1,opt,name=isStepPresent" json:"isStepPresent,omitempty"`
	// / The Step name of the given step.
	StepName []string `protobuf:"bytes,2,rep,name=stepName" json:"stepName,omitempty"`
	// / Flag indicating if the given Step is an alias.
	HasAlias bool `protobuf:"varint,3,opt,name=hasAlias" json:"hasAlias,omitempty"`
	// / File name in which the step implementation exists
	FileName string `protobuf:"bytes,4,opt,name=fileName" json:"fileName,omitempty"`
	// / Range of step
	Span *Span `protobuf:"bytes,5,opt,name=span" json:"span,omitempty"`
}

func (m *StepNameResponse) Reset()                    { *m = StepNameResponse{} }
func (m *StepNameResponse) String() string            { return proto.CompactTextString(m) }
func (*StepNameResponse) ProtoMessage()               {}
func (*StepNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *StepNameResponse) GetIsStepPresent() bool {
	if m != nil {
		return m.IsStepPresent
	}
	return false
}

func (m *StepNameResponse) GetStepName() []string {
	if m != nil {
		return m.StepName
	}
	return nil
}

func (m *StepNameResponse) GetHasAlias() bool {
	if m != nil {
		return m.HasAlias
	}
	return false
}

func (m *StepNameResponse) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *StepNameResponse) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

// / Response when a unsupported message request is sent.
type UnsupportedMessageResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UnsupportedMessageResponse) Reset()                    { *m = UnsupportedMessageResponse{} }
func (m *UnsupportedMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*UnsupportedMessageResponse) ProtoMessage()               {}
func (*UnsupportedMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *UnsupportedMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// / Request for caching a file
type CacheFileRequest struct {
	// / File content of the file to be cached
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	// / File path of the file to be cached
	FilePath string `protobuf:"bytes,2,opt,name=filePath" json:"filePath,omitempty"`
	// / Specifies if the file is closed
	IsClosed bool `protobuf:"varint,3,opt,name=isClosed" json:"isClosed,omitempty"`
}

func (m *CacheFileRequest) Reset()                    { *m = CacheFileRequest{} }
func (m *CacheFileRequest) String() string            { return proto.CompactTextString(m) }
func (*CacheFileRequest) ProtoMessage()               {}
func (*CacheFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{30} }

func (m *CacheFileRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CacheFileRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *CacheFileRequest) GetIsClosed() bool {
	if m != nil {
		return m.IsClosed
	}
	return false
}

// / Request for find step positions
type StepPositionsRequest struct {
	// / Get step positions for file path
	FilePath string `protobuf:"bytes,1,opt,name=filePath" json:"filePath,omitempty"`
}

func (m *StepPositionsRequest) Reset()                    { *m = StepPositionsRequest{} }
func (m *StepPositionsRequest) String() string            { return proto.CompactTextString(m) }
func (*StepPositionsRequest) ProtoMessage()               {}
func (*StepPositionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{31} }

func (m *StepPositionsRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

// / Response for find step positions
type StepPositionsResponse struct {
	// / Step Position
	StepPositions []*StepPositionsResponse_StepPosition `protobuf:"bytes,1,rep,name=stepPositions" json:"stepPositions,omitempty"`
	// / Error message
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *StepPositionsResponse) Reset()                    { *m = StepPositionsResponse{} }
func (m *StepPositionsResponse) String() string            { return proto.CompactTextString(m) }
func (*StepPositionsResponse) ProtoMessage()               {}
func (*StepPositionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{32} }

func (m *StepPositionsResponse) GetStepPositions() []*StepPositionsResponse_StepPosition {
	if m != nil {
		return m.StepPositions
	}
	return nil
}

func (m *StepPositionsResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// / Step position for each step implementation
type StepPositionsResponse_StepPosition struct {
	// / Step Value
	StepValue string `protobuf:"bytes,1,opt,name=stepValue" json:"stepValue,omitempty"`
	// / Range of step
	Span *Span `protobuf:"bytes,2,opt,name=span" json:"span,omitempty"`
}

func (m *StepPositionsResponse_StepPosition) Reset()         { *m = StepPositionsResponse_StepPosition{} }
func (m *StepPositionsResponse_StepPosition) String() string { return proto.CompactTextString(m) }
func (*StepPositionsResponse_StepPosition) ProtoMessage()    {}
func (*StepPositionsResponse_StepPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{32, 0}
}

func (m *StepPositionsResponse_StepPosition) GetStepValue() string {
	if m != nil {
		return m.StepValue
	}
	return ""
}

func (m *StepPositionsResponse_StepPosition) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

// / Request for getting Implementation file list
type ImplementationFileListRequest struct {
}

func (m *ImplementationFileListRequest) Reset()                    { *m = ImplementationFileListRequest{} }
func (m *ImplementationFileListRequest) String() string            { return proto.CompactTextString(m) }
func (*ImplementationFileListRequest) ProtoMessage()               {}
func (*ImplementationFileListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{33} }

// / Response for getting Implementation file list
type ImplementationFileListResponse struct {
	// / List of implementation files
	ImplementationFilePaths []string `protobuf:"bytes,1,rep,name=implementationFilePaths" json:"implementationFilePaths,omitempty"`
}

func (m *ImplementationFileListResponse) Reset()                    { *m = ImplementationFileListResponse{} }
func (m *ImplementationFileListResponse) String() string            { return proto.CompactTextString(m) }
func (*ImplementationFileListResponse) ProtoMessage()               {}
func (*ImplementationFileListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{34} }

func (m *ImplementationFileListResponse) GetImplementationFilePaths() []string {
	if m != nil {
		return m.ImplementationFilePaths
	}
	return nil
}

// / Request for injecting code snippet into implementation file
type StubImplementationCodeRequest struct {
	// / Path of the file where the new stub implementation will be added
	ImplementationFilePath string `protobuf:"bytes,1,opt,name=implementationFilePath" json:"implementationFilePath,omitempty"`
	// / List of step texts for which we want to generate stub implementation
	Steps []*ProtoStepValue `protobuf:"bytes,2,rep,name=steps" json:"steps,omitempty"`
}

func (m *StubImplementationCodeRequest) Reset()                    { *m = StubImplementationCodeRequest{} }
func (m *StubImplementationCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*StubImplementationCodeRequest) ProtoMessage()               {}
func (*StubImplementationCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{35} }

func (m *StubImplementationCodeRequest) GetImplementationFilePath() string {
	if m != nil {
		return m.ImplementationFilePath
	}
	return ""
}

func (m *StubImplementationCodeRequest) GetSteps() []*ProtoStepValue {
	if m != nil {
		return m.Steps
	}
	return nil
}

// / This is the message which gets transferred all the time
// / with proper message type set
// / One of the Request/Response fields will have value, depending on the MessageType set.
type Message struct {
	MessageType Message_MessageType `protobuf:"varint,1,opt,name=messageType,enum=gauge.messages.Message_MessageType" json:"messageType,omitempty"`
	// / A unique id to represent this message. A response to the message should copy over this value.
	// / This is used to synchronize messages & responses
	MessageId int64 `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
	// / [ExecutionStartingRequest](#gauge.messages.ExecutionStartingRequest)
	ExecutionStartingRequest *ExecutionStartingRequest `protobuf:"bytes,3,opt,name=executionStartingRequest" json:"executionStartingRequest,omitempty"`
	// / [SpecExecutionStartingRequest](#gauge.messages.SpecExecutionStartingRequest)
	SpecExecutionStartingRequest *SpecExecutionStartingRequest `protobuf:"bytes,4,opt,name=specExecutionStartingRequest" json:"specExecutionStartingRequest,omitempty"`
	// / [SpecExecutionEndingRequest](#gauge.messages.SpecExecutionEndingRequest)
	SpecExecutionEndingRequest *SpecExecutionEndingRequest `protobuf:"bytes,5,opt,name=specExecutionEndingRequest" json:"specExecutionEndingRequest,omitempty"`
	// / [ScenarioExecutionStartingRequest](#gauge.messages.ScenarioExecutionStartingRequest)
	ScenarioExecutionStartingRequest *ScenarioExecutionStartingRequest `protobuf:"bytes,6,opt,name=scenarioExecutionStartingRequest" json:"scenarioExecutionStartingRequest,omitempty"`
	// / [ScenarioExecutionEndingRequest](#gauge.messages.ScenarioExecutionEndingRequest)
	ScenarioExecutionEndingRequest *ScenarioExecutionEndingRequest `protobuf:"bytes,7,opt,name=scenarioExecutionEndingRequest" json:"scenarioExecutionEndingRequest,omitempty"`
	// / [StepExecutionStartingRequest](#gauge.messages.StepExecutionStartingRequest)
	StepExecutionStartingRequest *StepExecutionStartingRequest `protobuf:"bytes,8,opt,name=stepExecutionStartingRequest" json:"stepExecutionStartingRequest,omitempty"`
	// / [StepExecutionEndingRequest](#gauge.messages.StepExecutionEndingRequest)
	StepExecutionEndingRequest *StepExecutionEndingRequest `protobuf:"bytes,9,opt,name=stepExecutionEndingRequest" json:"stepExecutionEndingRequest,omitempty"`
	// / [ExecuteStepRequest](#gauge.messages.ExecuteStepRequest)
	ExecuteStepRequest *ExecuteStepRequest `protobuf:"bytes,10,opt,name=executeStepRequest" json:"executeStepRequest,omitempty"`
	// / [ExecutionEndingRequest](#gauge.messages.ExecutionEndingRequest)
	ExecutionEndingRequest *ExecutionEndingRequest `protobuf:"bytes,11,opt,name=executionEndingRequest" json:"executionEndingRequest,omitempty"`
	// / [StepValidateRequest](#gauge.messages.StepValidateRequest)
	StepValidateRequest *StepValidateRequest `protobuf:"bytes,12,opt,name=stepValidateRequest" json:"stepValidateRequest,omitempty"`
	// / [StepValidateResponse](#gauge.messages.StepValidateResponse)
	StepValidateResponse *StepValidateResponse `protobuf:"bytes,13,opt,name=stepValidateResponse" json:"stepValidateResponse,omitempty"`
	// / [ExecutionStatusResponse](#gauge.messages.ExecutionStatusResponse)
	ExecutionStatusResponse *ExecutionStatusResponse `protobuf:"bytes,14,opt,name=executionStatusResponse" json:"executionStatusResponse,omitempty"`
	// / [StepNamesRequest](#gauge.messages.StepNamesRequest)
	StepNamesRequest *StepNamesRequest `protobuf:"bytes,15,opt,name=stepNamesRequest" json:"stepNamesRequest,omitempty"`
	// / [StepNamesResponse](#gauge.messages.StepNamesResponse)
	StepNamesResponse *StepNamesResponse `protobuf:"bytes,16,opt,name=stepNamesResponse" json:"stepNamesResponse,omitempty"`
	// / [SuiteExecutionResult ](#gauge.messages.SuiteExecutionResult )
	SuiteExecutionResult *SuiteExecutionResult `protobuf:"bytes,17,opt,name=suiteExecutionResult" json:"suiteExecutionResult,omitempty"`
	// / [KillProcessRequest](#gauge.messages.KillProcessRequest)
	KillProcessRequest *KillProcessRequest `protobuf:"bytes,18,opt,name=killProcessRequest" json:"killProcessRequest,omitempty"`
	// / [ScenarioDataStoreInitRequest](#gauge.messages.ScenarioDataStoreInitRequest)
	ScenarioDataStoreInitRequest *ScenarioDataStoreInitRequest `protobuf:"bytes,19,opt,name=scenarioDataStoreInitRequest" json:"scenarioDataStoreInitRequest,omitempty"`
	// / [SpecDataStoreInitRequest](#gauge.messages.SpecDataStoreInitRequest)
	SpecDataStoreInitRequest *SpecDataStoreInitRequest `protobuf:"bytes,20,opt,name=specDataStoreInitRequest" json:"specDataStoreInitRequest,omitempty"`
	// / [SuiteDataStoreInitRequest](#gauge.messages.SuiteDataStoreInitRequest)
	SuiteDataStoreInitRequest *SuiteDataStoreInitRequest `protobuf:"bytes,21,opt,name=suiteDataStoreInitRequest" json:"suiteDataStoreInitRequest,omitempty"`
	// / [StepNameRequest](#gauge.messages.StepNameRequest)
	StepNameRequest *StepNameRequest `protobuf:"bytes,22,opt,name=stepNameRequest" json:"stepNameRequest,omitempty"`
	// / [StepNameResponse](#gauge.messages.StepNameResponse)
	StepNameResponse *StepNameResponse `protobuf:"bytes,23,opt,name=stepNameResponse" json:"stepNameResponse,omitempty"`
	// / [RefactorRequest](#gauge.messages.RefactorRequest)
	RefactorRequest *RefactorRequest `protobuf:"bytes,24,opt,name=refactorRequest" json:"refactorRequest,omitempty"`
	// / [RefactorResponse](#gauge.messages.RefactorResponse)
	RefactorResponse *RefactorResponse `protobuf:"bytes,25,opt,name=refactorResponse" json:"refactorResponse,omitempty"`
	// / [UnsupportedMessageResponse](#gauge.messages.UnsupportedMessageResponse)
	UnsupportedMessageResponse *UnsupportedMessageResponse `protobuf:"bytes,26,opt,name=unsupportedMessageResponse" json:"unsupportedMessageResponse,omitempty"`
	// / [CacheFileRequest](#gauge.messages.CacheFileRequest)
	CacheFileRequest *CacheFileRequest `protobuf:"bytes,27,opt,name=cacheFileRequest" json:"cacheFileRequest,omitempty"`
	// / [StepPositionsRequest](#gauge.messages.StepPositionsRequest)
	StepPositionsRequest *StepPositionsRequest `protobuf:"bytes,28,opt,name=stepPositionsRequest" json:"stepPositionsRequest,omitempty"`
	// / [StepPositionsResponse](#gauge.messages.StepPositionsResponse)
	StepPositionsResponse *StepPositionsResponse `protobuf:"bytes,29,opt,name=stepPositionsResponse" json:"stepPositionsResponse,omitempty"`
	// / [ImplementationFileListRequest](#gauge.messages.ImplementationFileListRequest)
	ImplementationFileListRequest *ImplementationFileListRequest `protobuf:"bytes,30,opt,name=implementationFileListRequest" json:"implementationFileListRequest,omitempty"`
	// / [ImplementationFileListResponse](#gauge.messages.ImplementationFileListResponse)
	ImplementationFileListResponse *ImplementationFileListResponse `protobuf:"bytes,31,opt,name=implementationFileListResponse" json:"implementationFileListResponse,omitempty"`
	// / [StubImplementationCodeRequest](#gauge.messages.StubImplementationCodeRequest)
	StubImplementationCodeRequest *StubImplementationCodeRequest `protobuf:"bytes,32,opt,name=stubImplementationCodeRequest" json:"stubImplementationCodeRequest,omitempty"`
	// / [FileChanges](#gauge.messages.FileChanges)
	FileChanges *FileChanges `protobuf:"bytes,33,opt,name=fileChanges" json:"fileChanges,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{36} }

func (m *Message) GetMessageType() Message_MessageType {
	if m != nil {
		return m.MessageType
	}
	return Message_ExecutionStarting
}

func (m *Message) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Message) GetExecutionStartingRequest() *ExecutionStartingRequest {
	if m != nil {
		return m.ExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetSpecExecutionStartingRequest() *SpecExecutionStartingRequest {
	if m != nil {
		return m.SpecExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetSpecExecutionEndingRequest() *SpecExecutionEndingRequest {
	if m != nil {
		return m.SpecExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetScenarioExecutionStartingRequest() *ScenarioExecutionStartingRequest {
	if m != nil {
		return m.ScenarioExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetScenarioExecutionEndingRequest() *ScenarioExecutionEndingRequest {
	if m != nil {
		return m.ScenarioExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetStepExecutionStartingRequest() *StepExecutionStartingRequest {
	if m != nil {
		return m.StepExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetStepExecutionEndingRequest() *StepExecutionEndingRequest {
	if m != nil {
		return m.StepExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetExecuteStepRequest() *ExecuteStepRequest {
	if m != nil {
		return m.ExecuteStepRequest
	}
	return nil
}

func (m *Message) GetExecutionEndingRequest() *ExecutionEndingRequest {
	if m != nil {
		return m.ExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetStepValidateRequest() *StepValidateRequest {
	if m != nil {
		return m.StepValidateRequest
	}
	return nil
}

func (m *Message) GetStepValidateResponse() *StepValidateResponse {
	if m != nil {
		return m.StepValidateResponse
	}
	return nil
}

func (m *Message) GetExecutionStatusResponse() *ExecutionStatusResponse {
	if m != nil {
		return m.ExecutionStatusResponse
	}
	return nil
}

func (m *Message) GetStepNamesRequest() *StepNamesRequest {
	if m != nil {
		return m.StepNamesRequest
	}
	return nil
}

func (m *Message) GetStepNamesResponse() *StepNamesResponse {
	if m != nil {
		return m.StepNamesResponse
	}
	return nil
}

func (m *Message) GetSuiteExecutionResult() *SuiteExecutionResult {
	if m != nil {
		return m.SuiteExecutionResult
	}
	return nil
}

func (m *Message) GetKillProcessRequest() *KillProcessRequest {
	if m != nil {
		return m.KillProcessRequest
	}
	return nil
}

func (m *Message) GetScenarioDataStoreInitRequest() *ScenarioDataStoreInitRequest {
	if m != nil {
		return m.ScenarioDataStoreInitRequest
	}
	return nil
}

func (m *Message) GetSpecDataStoreInitRequest() *SpecDataStoreInitRequest {
	if m != nil {
		return m.SpecDataStoreInitRequest
	}
	return nil
}

func (m *Message) GetSuiteDataStoreInitRequest() *SuiteDataStoreInitRequest {
	if m != nil {
		return m.SuiteDataStoreInitRequest
	}
	return nil
}

func (m *Message) GetStepNameRequest() *StepNameRequest {
	if m != nil {
		return m.StepNameRequest
	}
	return nil
}

func (m *Message) GetStepNameResponse() *StepNameResponse {
	if m != nil {
		return m.StepNameResponse
	}
	return nil
}

func (m *Message) GetRefactorRequest() *RefactorRequest {
	if m != nil {
		return m.RefactorRequest
	}
	return nil
}

func (m *Message) GetRefactorResponse() *RefactorResponse {
	if m != nil {
		return m.RefactorResponse
	}
	return nil
}

func (m *Message) GetUnsupportedMessageResponse() *UnsupportedMessageResponse {
	if m != nil {
		return m.UnsupportedMessageResponse
	}
	return nil
}

func (m *Message) GetCacheFileRequest() *CacheFileRequest {
	if m != nil {
		return m.CacheFileRequest
	}
	return nil
}

func (m *Message) GetStepPositionsRequest() *StepPositionsRequest {
	if m != nil {
		return m.StepPositionsRequest
	}
	return nil
}

func (m *Message) GetStepPositionsResponse() *StepPositionsResponse {
	if m != nil {
		return m.StepPositionsResponse
	}
	return nil
}

func (m *Message) GetImplementationFileListRequest() *ImplementationFileListRequest {
	if m != nil {
		return m.ImplementationFileListRequest
	}
	return nil
}

func (m *Message) GetImplementationFileListResponse() *ImplementationFileListResponse {
	if m != nil {
		return m.ImplementationFileListResponse
	}
	return nil
}

func (m *Message) GetStubImplementationCodeRequest() *StubImplementationCodeRequest {
	if m != nil {
		return m.StubImplementationCodeRequest
	}
	return nil
}

func (m *Message) GetFileChanges() *FileChanges {
	if m != nil {
		return m.FileChanges
	}
	return nil
}

func init() {
	proto.RegisterType((*KillProcessRequest)(nil), "gauge.messages.KillProcessRequest")
	proto.RegisterType((*ExecutionStatusResponse)(nil), "gauge.messages.ExecutionStatusResponse")
	proto.RegisterType((*ExecutionStartingRequest)(nil), "gauge.messages.ExecutionStartingRequest")
	proto.RegisterType((*ExecutionEndingRequest)(nil), "gauge.messages.ExecutionEndingRequest")
	proto.RegisterType((*SpecExecutionStartingRequest)(nil), "gauge.messages.SpecExecutionStartingRequest")
	proto.RegisterType((*SpecExecutionEndingRequest)(nil), "gauge.messages.SpecExecutionEndingRequest")
	proto.RegisterType((*ScenarioExecutionStartingRequest)(nil), "gauge.messages.ScenarioExecutionStartingRequest")
	proto.RegisterType((*ScenarioExecutionEndingRequest)(nil), "gauge.messages.ScenarioExecutionEndingRequest")
	proto.RegisterType((*StepExecutionStartingRequest)(nil), "gauge.messages.StepExecutionStartingRequest")
	proto.RegisterType((*StepExecutionEndingRequest)(nil), "gauge.messages.StepExecutionEndingRequest")
	proto.RegisterType((*ExecutionInfo)(nil), "gauge.messages.ExecutionInfo")
	proto.RegisterType((*SpecInfo)(nil), "gauge.messages.SpecInfo")
	proto.RegisterType((*ScenarioInfo)(nil), "gauge.messages.ScenarioInfo")
	proto.RegisterType((*StepInfo)(nil), "gauge.messages.StepInfo")
	proto.RegisterType((*ExecuteStepRequest)(nil), "gauge.messages.ExecuteStepRequest")
	proto.RegisterType((*StepValidateRequest)(nil), "gauge.messages.StepValidateRequest")
	proto.RegisterType((*StepValidateResponse)(nil), "gauge.messages.StepValidateResponse")
	proto.RegisterType((*SuiteExecutionResult)(nil), "gauge.messages.SuiteExecutionResult")
	proto.RegisterType((*StepNamesRequest)(nil), "gauge.messages.StepNamesRequest")
	proto.RegisterType((*StepNamesResponse)(nil), "gauge.messages.StepNamesResponse")
	proto.RegisterType((*ScenarioDataStoreInitRequest)(nil), "gauge.messages.ScenarioDataStoreInitRequest")
	proto.RegisterType((*SpecDataStoreInitRequest)(nil), "gauge.messages.SpecDataStoreInitRequest")
	proto.RegisterType((*SuiteDataStoreInitRequest)(nil), "gauge.messages.SuiteDataStoreInitRequest")
	proto.RegisterType((*ParameterPosition)(nil), "gauge.messages.ParameterPosition")
	proto.RegisterType((*RefactorRequest)(nil), "gauge.messages.RefactorRequest")
	proto.RegisterType((*FileChanges)(nil), "gauge.messages.FileChanges")
	proto.RegisterType((*RefactorResponse)(nil), "gauge.messages.RefactorResponse")
	proto.RegisterType((*StepNameRequest)(nil), "gauge.messages.StepNameRequest")
	proto.RegisterType((*StepNameResponse)(nil), "gauge.messages.StepNameResponse")
	proto.RegisterType((*UnsupportedMessageResponse)(nil), "gauge.messages.UnsupportedMessageResponse")
	proto.RegisterType((*CacheFileRequest)(nil), "gauge.messages.CacheFileRequest")
	proto.RegisterType((*StepPositionsRequest)(nil), "gauge.messages.StepPositionsRequest")
	proto.RegisterType((*StepPositionsResponse)(nil), "gauge.messages.StepPositionsResponse")
	proto.RegisterType((*StepPositionsResponse_StepPosition)(nil), "gauge.messages.StepPositionsResponse.StepPosition")
	proto.RegisterType((*ImplementationFileListRequest)(nil), "gauge.messages.ImplementationFileListRequest")
	proto.RegisterType((*ImplementationFileListResponse)(nil), "gauge.messages.ImplementationFileListResponse")
	proto.RegisterType((*StubImplementationCodeRequest)(nil), "gauge.messages.StubImplementationCodeRequest")
	proto.RegisterType((*Message)(nil), "gauge.messages.Message")
	proto.RegisterEnum("gauge.messages.StepValidateResponse_ErrorType", StepValidateResponse_ErrorType_name, StepValidateResponse_ErrorType_value)
	proto.RegisterEnum("gauge.messages.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1994 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x5f, 0x6f, 0x1b, 0xb9,
	0x11, 0x3f, 0xc9, 0x4e, 0x2c, 0x8f, 0x6c, 0x8b, 0xa6, 0x65, 0x9b, 0x96, 0x6d, 0x45, 0xde, 0xbb,
	0x5e, 0x7d, 0x45, 0xeb, 0x16, 0x6e, 0x11, 0xb4, 0x45, 0xfb, 0x90, 0x38, 0x4a, 0x21, 0x9c, 0x63,
	0xeb, 0x68, 0xe7, 0x7a, 0xb8, 0x02, 0x0d, 0x36, 0x12, 0xa3, 0xec, 0x45, 0xde, 0xd5, 0x2d, 0x57,
	0x77, 0x57, 0xa0, 0xcf, 0x7d, 0xeb, 0x63, 0x9f, 0x0b, 0xb4, 0xe8, 0x4b, 0x3f, 0x40, 0x3f, 0x42,
	0x81, 0x7e, 0x8a, 0x7e, 0x84, 0x7e, 0x85, 0x82, 0x5c, 0x72, 0xb5, 0xcb, 0x25, 0x57, 0x79, 0x49,
	0x9e, 0x62, 0xce, 0xce, 0xfc, 0x66, 0x86, 0x33, 0x9c, 0x3f, 0x0a, 0x6c, 0xdd, 0x31, 0xce, 0xfd,
	0x09, 0xe3, 0x67, 0xb3, 0x38, 0x4a, 0x22, 0xbc, 0x35, 0xf1, 0xe7, 0x13, 0x76, 0xa6, 0xa9, 0x1d,
	0xe0, 0x33, 0x36, 0x4a, 0xbf, 0x79, 0x6d, 0xc0, 0x9f, 0x06, 0xd3, 0xe9, 0x30, 0x8e, 0x46, 0x8c,
	0x73, 0xca, 0xbe, 0x9e, 0x33, 0x9e, 0x78, 0x01, 0xec, 0xf7, 0xbf, 0x63, 0xa3, 0x79, 0x12, 0x44,
	0xe1, 0x4d, 0xe2, 0x27, 0x73, 0x4e, 0x19, 0x9f, 0x45, 0x21, 0x67, 0xf8, 0x0a, 0x5a, 0x4c, 0x7f,
	0xa2, 0x8c, 0xcf, 0xa7, 0x09, 0xa9, 0xf5, 0x6a, 0xa7, 0xcd, 0xf3, 0x8f, 0xce, 0x8a, 0x6a, 0xce,
	0x86, 0x42, 0x41, 0xbf, 0xc8, 0x4b, 0x4d, 0x61, 0xef, 0x0e, 0x48, 0x5e, 0x55, 0x9c, 0x04, 0xe1,
	0x44, 0x99, 0x81, 0x3f, 0x83, 0xf6, 0x68, 0x1e, 0xc7, 0x2c, 0x4c, 0x32, 0x96, 0x41, 0xf8, 0x2a,
	0x52, 0x0a, 0x8f, 0x4d, 0x85, 0x05, 0x26, 0x6a, 0x15, 0xf5, 0xde, 0xc0, 0x5e, 0x46, 0xe8, 0x87,
	0xe3, 0x77, 0xab, 0xec, 0x6b, 0x38, 0xba, 0x99, 0xb1, 0xd1, 0xfb, 0xf4, 0x2f, 0x82, 0x4e, 0x41,
	0xe5, 0x3b, 0xf7, 0x71, 0x0e, 0xbd, 0x9b, 0x11, 0x0b, 0xfd, 0x38, 0x88, 0xde, 0xa7, 0x9f, 0x1c,
	0xba, 0x25, 0xb5, 0xef, 0x25, 0x9e, 0x09, 0x9b, 0xbd, 0xef, 0x78, 0xe6, 0x55, 0xbe, 0x73, 0x1f,
	0xff, 0x57, 0x83, 0xcd, 0x02, 0x05, 0xff, 0x12, 0x9a, 0x8a, 0x53, 0x64, 0x96, 0xc2, 0x26, 0x26,
	0xb6, 0xf8, 0x26, 0x61, 0xf3, 0xcc, 0xf8, 0x29, 0xb4, 0xf4, 0x51, 0x45, 0x8b, 0xd4, 0xa5, 0xfc,
	0x51, 0x49, 0x5e, 0x7d, 0x97, 0x18, 0xa6, 0x50, 0xde, 0x86, 0x84, 0xcd, 0xc8, 0x8a, 0xc3, 0x86,
	0x84, 0xcd, 0x8a, 0x36, 0x24, 0x6c, 0x86, 0xbb, 0x00, 0x3c, 0xf1, 0x47, 0x6f, 0x92, 0xd8, 0x1f,
	0x31, 0xb2, 0xda, 0xab, 0x9d, 0xae, 0xd3, 0x1c, 0xc5, 0xfb, 0x0a, 0x1a, 0xda, 0x78, 0x8c, 0x61,
	0x35, 0xf4, 0xef, 0x98, 0x74, 0x72, 0x9d, 0xca, 0xbf, 0x71, 0x07, 0x1a, 0xaf, 0x82, 0x29, 0xbb,
	0x12, 0xf4, 0xba, 0xa4, 0x67, 0x67, 0xf1, 0x2d, 0xe0, 0x4f, 0xfd, 0x60, 0xca, 0xc6, 0xd2, 0xa8,
	0x06, 0xcd, 0xce, 0x02, 0x2b, 0xf1, 0x27, 0x9c, 0xac, 0xf6, 0x56, 0x04, 0x96, 0xf8, 0xdb, 0xa3,
	0xb0, 0x91, 0x77, 0xd4, 0xa5, 0x2f, 0xc3, 0xac, 0x3b, 0x30, 0x57, 0x72, 0x98, 0x7f, 0xab, 0x41,
	0x43, 0x7b, 0x8e, 0x1f, 0xc2, 0x2a, 0x17, 0x37, 0x94, 0x46, 0xc9, 0xb3, 0x67, 0x00, 0x13, 0xec,
	0x2a, 0x87, 0xa8, 0xe4, 0xaf, 0x54, 0xaa, 0x2f, 0xf0, 0x56, 0x5e, 0xe0, 0x4a, 0xee, 0x02, 0x25,
	0x05, 0x7b, 0xb0, 0xc1, 0xe2, 0x38, 0x8a, 0x9f, 0xa5, 0x5a, 0xd4, 0x15, 0x17, 0x68, 0xde, 0x7f,
	0x6a, 0x80, 0xcb, 0xca, 0xf1, 0xc7, 0xb0, 0xe5, 0x8f, 0x92, 0xb9, 0x3f, 0x15, 0xc4, 0x5b, 0xf6,
	0x5d, 0xa2, 0x6e, 0xc2, 0xa0, 0x0a, 0xbe, 0x99, 0x1f, 0x73, 0x36, 0xce, 0xf8, 0xd2, 0x48, 0x18,
	0x54, 0x7c, 0x0a, 0x2d, 0xae, 0xee, 0x57, 0x18, 0x1f, 0x84, 0x13, 0x15, 0x16, 0x93, 0x8c, 0x7f,
	0x01, 0x30, 0xf3, 0x63, 0xff, 0x8e, 0x25, 0x2c, 0x4e, 0x63, 0xd4, 0x3c, 0x3f, 0x28, 0xb5, 0x30,
	0xcd, 0x41, 0x73, 0xcc, 0xde, 0x5f, 0x6b, 0xb0, 0x23, 0x34, 0x7e, 0xee, 0x4f, 0x83, 0xb1, 0x9f,
	0x30, 0xed, 0x4c, 0x07, 0x1a, 0xbc, 0xe8, 0x46, 0x76, 0xc6, 0x67, 0x80, 0xc3, 0xf9, 0xdd, 0x4b,
	0x16, 0x5f, 0xbf, 0x1a, 0x2e, 0xd4, 0x0a, 0x27, 0xee, 0x51, 0xcb, 0x17, 0xfc, 0x2b, 0x58, 0xe7,
	0xa9, 0x8a, 0x39, 0x53, 0xe9, 0xde, 0xb5, 0x36, 0xd8, 0x1b, 0xcd, 0x45, 0x17, 0x02, 0xde, 0x5f,
	0xea, 0xd0, 0x2e, 0x5a, 0xa8, 0xba, 0x37, 0x81, 0xb5, 0x80, 0x4b, 0xaa, 0xb4, 0xb0, 0x41, 0xf5,
	0xb1, 0x14, 0xc4, 0x7a, 0x39, 0x88, 0xf8, 0x12, 0xd6, 0xe5, 0xf9, 0xf6, 0x0f, 0xb3, 0xd4, 0xa8,
	0xad, 0xf3, 0x33, 0xdb, 0x1b, 0x34, 0xd5, 0x9e, 0xf5, 0xb5, 0x14, 0x5d, 0x00, 0xc8, 0xb4, 0x9a,
	0x4f, 0x26, 0x8c, 0x8b, 0x4a, 0x93, 0xbd, 0xcb, 0x8c, 0xe2, 0x7d, 0x06, 0xeb, 0x99, 0x1c, 0x3e,
	0x81, 0xe3, 0x9b, 0xdb, 0xfe, 0xf0, 0xc5, 0xe0, 0xd9, 0xf0, 0xb2, 0xff, 0xac, 0x7f, 0x75, 0xfb,
	0xe8, 0x76, 0x70, 0x7d, 0xf5, 0xe2, 0xea, 0xfa, 0xf6, 0xc5, 0xd3, 0xeb, 0xe7, 0x57, 0x4f, 0xd0,
	0x07, 0x82, 0xe5, 0xc9, 0xf3, 0xe1, 0xe5, 0xe0, 0xe2, 0xd1, 0x6d, 0xff, 0x85, 0x85, 0x19, 0xd5,
	0xbc, 0x2f, 0xa1, 0x7d, 0x33, 0x0f, 0x12, 0x66, 0x4c, 0x25, 0xf8, 0x31, 0x34, 0xb9, 0xa0, 0x17,
	0x06, 0x9a, 0x9e, 0xfd, 0xbe, 0x17, 0x7c, 0x34, 0x2f, 0xe4, 0x61, 0x40, 0xc2, 0x77, 0x51, 0x16,
	0xb2, 0x39, 0xea, 0x13, 0xd8, 0xce, 0xd1, 0x54, 0x0c, 0xda, 0x70, 0x4f, 0x44, 0x8a, 0x93, 0x9a,
	0x7c, 0xc4, 0xe9, 0xc1, 0xeb, 0xc2, 0x91, 0xae, 0x0c, 0x4f, 0xfc, 0xc4, 0xbf, 0x49, 0xa2, 0x98,
	0x0d, 0xc2, 0x20, 0xd1, 0x50, 0x1d, 0x20, 0xa2, 0x4a, 0x59, 0xbf, 0x1d, 0xc2, 0x81, 0x34, 0xcb,
	0xfa, 0xf1, 0xb7, 0xb0, 0x9d, 0xe5, 0xd5, 0x30, 0xe2, 0x81, 0x70, 0x1b, 0xf7, 0xa0, 0x19, 0x4d,
	0xc7, 0xfa, 0x28, 0x1d, 0xbe, 0x47, 0xf3, 0x24, 0xc1, 0x11, 0xb2, 0x6f, 0x33, 0x8e, 0x34, 0x53,
	0xf3, 0x24, 0xef, 0x4f, 0x75, 0x68, 0x51, 0xf6, 0xca, 0x1f, 0x25, 0x51, 0xac, 0x9f, 0xc0, 0x63,
	0xd8, 0x88, 0xa6, 0xe3, 0x2c, 0x27, 0xd5, 0x4d, 0x2e, 0xcb, 0xdc, 0x82, 0x8c, 0xc0, 0x08, 0xd9,
	0xb7, 0x0b, 0x8c, 0xfa, 0xdb, 0x61, 0xe4, 0x65, 0xf0, 0x40, 0xd6, 0x0b, 0xff, 0x4e, 0x1b, 0x9b,
	0x56, 0xcc, 0xe6, 0xf9, 0x89, 0xf3, 0x85, 0x6b, 0x4e, 0x6a, 0x08, 0x8a, 0x8b, 0xe0, 0xfe, 0x37,
	0xec, 0xe2, 0xb5, 0x1f, 0x4e, 0x18, 0x97, 0x79, 0xda, 0xa0, 0x79, 0x92, 0xf7, 0x29, 0x34, 0x9f,
	0x06, 0x53, 0x7d, 0x2c, 0xf4, 0x8b, 0x9a, 0xd1, 0x2f, 0x7a, 0xd0, 0x14, 0x7f, 0x5f, 0x44, 0x61,
	0xc2, 0x42, 0x5d, 0xc4, 0xf2, 0x24, 0xef, 0x1f, 0x35, 0x40, 0x8b, 0x5b, 0x5d, 0x3c, 0x5b, 0x3e,
	0x1f, 0x89, 0x09, 0x5d, 0x3f, 0x5b, 0x75, 0x14, 0xc9, 0x24, 0x5f, 0x94, 0x82, 0x4a, 0x0f, 0xe2,
	0x31, 0x0b, 0x4c, 0x9e, 0x9a, 0x34, 0x56, 0xed, 0xa2, 0x40, 0xc3, 0xbf, 0x56, 0xa6, 0x64, 0x7e,
	0x89, 0xfb, 0x39, 0x34, 0xef, 0x27, 0xe7, 0x18, 0xcd, 0xf3, 0x7b, 0x3f, 0x86, 0x96, 0x4e, 0x6d,
	0x1d, 0xfc, 0xa3, 0x7c, 0xcd, 0x4a, 0x3d, 0xcf, 0xd5, 0xa4, 0x7f, 0xd5, 0x16, 0x0f, 0x24, 0x73,
	0xec, 0x23, 0xd8, 0x0c, 0xb8, 0xa0, 0x0e, 0x63, 0xc6, 0xc5, 0x8d, 0xa4, 0xee, 0x15, 0x89, 0xba,
	0xb0, 0xaa, 0x0e, 0xbc, 0xa2, 0x0b, 0xab, 0xee, 0xc0, 0xaf, 0x7d, 0xfe, 0x68, 0x1a, 0xf8, 0x5c,
	0x77, 0x60, 0x7d, 0x2e, 0x44, 0x62, 0xd5, 0x88, 0xc4, 0x29, 0xac, 0xf2, 0x99, 0x1f, 0x92, 0x7b,
	0x32, 0xbb, 0xda, 0xe5, 0x71, 0xc6, 0x0f, 0xa9, 0xe4, 0xf0, 0x1e, 0x42, 0xe7, 0x79, 0xc8, 0xe7,
	0xb3, 0x59, 0x14, 0x27, 0x6c, 0xac, 0x6a, 0x61, 0x3e, 0x34, 0x4a, 0x48, 0xb9, 0xac, 0x8f, 0xde,
	0x18, 0xd0, 0x85, 0x3f, 0x7a, 0xcd, 0xc4, 0x15, 0xea, 0x2b, 0x22, 0xb0, 0x36, 0x52, 0xb1, 0x57,
	0xdc, 0xea, 0xa8, 0x6d, 0x1d, 0xfa, 0xc9, 0xeb, 0xfc, 0x94, 0x21, 0xce, 0x69, 0x73, 0xbe, 0x98,
	0x46, 0x3c, 0x3f, 0x65, 0xa4, 0x67, 0xef, 0x3c, 0xad, 0xf4, 0x59, 0xbe, 0xe6, 0x9a, 0x51, 0x86,
	0x57, 0x2b, 0xe2, 0x79, 0xff, 0xad, 0xc1, 0xae, 0x21, 0xa4, 0xbc, 0xf9, 0x02, 0x36, 0x79, 0xfe,
	0x83, 0xac, 0x51, 0xcd, 0xf3, 0x73, 0x5b, 0x95, 0x2f, 0x49, 0x17, 0xa8, 0xb4, 0x08, 0x64, 0x4f,
	0xd4, 0xce, 0xe7, 0xb0, 0x91, 0x17, 0xaa, 0x4e, 0xa1, 0x2c, 0x66, 0xf5, 0xa5, 0x31, 0x7b, 0x00,
	0xc7, 0x83, 0xbb, 0xd9, 0x94, 0xdd, 0xb1, 0x30, 0xf1, 0x05, 0xb2, 0x08, 0xc2, 0x65, 0xc0, 0xb3,
	0xaa, 0xf8, 0x25, 0x74, 0x5d, 0x0c, 0xea, 0x2a, 0x7e, 0x0e, 0xfb, 0x41, 0x89, 0x43, 0x5c, 0x9f,
	0x2e, 0xdc, 0xae, 0xcf, 0xde, 0x9f, 0x6b, 0x70, 0x7c, 0x93, 0xcc, 0x5f, 0x16, 0x15, 0x5c, 0x44,
	0xe3, 0x2c, 0x0d, 0x1e, 0xc2, 0x9e, 0x5d, 0x58, 0xf9, 0xec, 0xf8, 0x8a, 0x7f, 0xa6, 0x5b, 0x47,
	0x5d, 0x86, 0x65, 0x59, 0x4d, 0x54, 0xad, 0xe5, 0xdf, 0x5d, 0x58, 0xd3, 0x2d, 0xbc, 0x0f, 0x4d,
	0xc5, 0x2d, 0x9b, 0x78, 0x4d, 0x36, 0xf1, 0x0f, 0x4d, 0x1c, 0xc5, 0xad, 0xff, 0x95, 0x9d, 0x3b,
	0x2f, 0x27, 0xe2, 0xa4, 0x8e, 0x83, 0x74, 0x5e, 0x5c, 0xa1, 0x0b, 0x02, 0x1e, 0x03, 0x61, 0x8e,
	0x1d, 0x49, 0xcd, 0x32, 0xa7, 0xce, 0xd5, 0xc4, 0xe0, 0xa7, 0x4e, 0x24, 0x3c, 0x83, 0x23, 0x5e,
	0xb1, 0x5d, 0xcb, 0x17, 0xdf, 0x3c, 0xff, 0xa1, 0x6d, 0x51, 0x71, 0x6a, 0xab, 0x44, 0xc4, 0x5f,
	0x41, 0x87, 0x3b, 0x97, 0x6b, 0x55, 0x49, 0x7e, 0x50, 0xa9, 0xaf, 0x20, 0x41, 0x2b, 0xd0, 0xf0,
	0x1f, 0xa1, 0xc7, 0x97, 0xec, 0xd5, 0xe4, 0xbe, 0xd4, 0xf8, 0x13, 0xd7, 0x2a, 0xe5, 0xf4, 0x72,
	0x29, 0x32, 0xfe, 0x06, 0xba, 0xbc, 0x72, 0xbd, 0x26, 0x6b, 0x52, 0xf7, 0xd9, 0x52, 0xdd, 0x45,
	0x8f, 0x97, 0xa0, 0xca, 0x98, 0x56, 0x6c, 0xd8, 0xa4, 0xe1, 0x88, 0x69, 0x85, 0x0c, 0xad, 0x44,
	0x94, 0x31, 0x75, 0x2e, 0xd8, 0x64, 0xdd, 0x11, 0x53, 0xa7, 0x04, 0xad, 0x40, 0xc3, 0x14, 0x30,
	0x2b, 0xed, 0x40, 0x04, 0xde, 0x7a, 0x55, 0xb3, 0x48, 0xe3, 0xdf, 0xc3, 0x1e, 0xb3, 0xdb, 0xde,
	0x94, 0xb8, 0x1f, 0x3b, 0x5f, 0x5a, 0xd1, 0x6e, 0x07, 0x0a, 0x7e, 0x0e, 0x3b, 0xbc, 0xbc, 0xeb,
	0x90, 0x0d, 0x09, 0xfe, 0x61, 0xf5, 0xf4, 0x9f, 0x22, 0xdb, 0xe4, 0xf1, 0x17, 0xd0, 0xe6, 0x96,
	0x4d, 0x81, 0x6c, 0xda, 0x7f, 0x4b, 0xb4, 0x6d, 0x15, 0xd4, 0x8a, 0x80, 0x7d, 0xd8, 0x67, 0xf6,
	0xdf, 0x2e, 0xc9, 0x96, 0x04, 0xff, 0x7e, 0x55, 0xed, 0xc9, 0xb1, 0x53, 0x17, 0x0e, 0xbe, 0x04,
	0xc4, 0x8d, 0x51, 0x9f, 0xb4, 0xec, 0x3b, 0x83, 0xb9, 0x12, 0xd0, 0x92, 0x24, 0xbe, 0x86, 0x6d,
	0x6e, 0x2e, 0x09, 0x04, 0x49, 0xb8, 0x93, 0x0a, 0x38, 0x65, 0x64, 0x59, 0x56, 0xde, 0xad, 0x65,
	0xcb, 0x21, 0xdb, 0x8e, 0xbb, 0xb5, 0xf0, 0x52, 0x2b, 0x82, 0x48, 0xe0, 0x37, 0xa5, 0x5f, 0x8b,
	0x09, 0xb6, 0x27, 0x70, 0xf9, 0x77, 0x65, 0x6a, 0x91, 0x96, 0x4f, 0xbe, 0x62, 0xf1, 0x21, 0x3b,
	0x8e, 0x27, 0x5f, 0x21, 0x43, 0x2b, 0x11, 0x45, 0x7b, 0xe2, 0x8e, 0x55, 0x8a, 0xb4, 0xed, 0xed,
	0xc9, 0xb5, 0x7a, 0x51, 0x27, 0x12, 0x9e, 0xc0, 0x01, 0x77, 0x2d, 0x65, 0x64, 0x57, 0xaa, 0xf9,
	0xc4, 0x1a, 0x0a, 0xab, 0x1e, 0x37, 0x16, 0x1e, 0x40, 0x8b, 0x17, 0x27, 0x71, 0xb2, 0x27, 0xe1,
	0x1f, 0xb8, 0xb2, 0x47, 0x83, 0x9a, 0x72, 0xf9, 0xc4, 0xce, 0x32, 0x71, 0xbf, 0x3a, 0xb1, 0xb3,
	0x44, 0x2c, 0x49, 0x0a, 0xc3, 0xe2, 0xe2, 0x7e, 0x48, 0x88, 0xdd, 0x30, 0x63, 0x8d, 0xa4, 0xa6,
	0x9c, 0x30, 0x2c, 0x36, 0x96, 0x22, 0x72, 0x60, 0x37, 0xcc, 0x5c, 0x9e, 0x68, 0x49, 0x52, 0xd4,
	0xfc, 0xb9, 0x73, 0xa2, 0x27, 0x1d, 0x7b, 0xcd, 0x77, 0xef, 0x00, 0xb4, 0x02, 0x4d, 0x58, 0x3e,
	0x32, 0xb6, 0x00, 0x72, 0x68, 0xb7, 0xdc, 0xdc, 0x16, 0x68, 0x49, 0x52, 0x97, 0x4d, 0x73, 0xda,
	0x27, 0x47, 0xee, 0xb2, 0x69, 0xf2, 0x52, 0x2b, 0x02, 0xfe, 0x1d, 0xec, 0x72, 0xdb, 0x50, 0x4f,
	0x8e, 0x25, 0xf4, 0xf7, 0xde, 0x6a, 0x03, 0xa0, 0x76, 0x0c, 0xcc, 0xe1, 0x38, 0xa8, 0x1a, 0xc7,
	0x49, 0x57, 0x2a, 0xf9, 0x91, 0xa9, 0xa4, 0x72, 0x86, 0xa7, 0xd5, 0x98, 0x62, 0x86, 0x09, 0x2a,
	0x47, 0x7c, 0xf2, 0xc0, 0x3e, 0xc3, 0x54, 0x2f, 0x06, 0x74, 0x09, 0xaa, 0x70, 0x96, 0x57, 0x4d,
	0xff, 0xa4, 0x67, 0x77, 0xb6, 0x72, 0x65, 0xa0, 0xd5, 0x98, 0xe6, 0x36, 0x7f, 0x22, 0x55, 0xbc,
	0xfd, 0x36, 0xff, 0xf7, 0xfb, 0xd0, 0xcc, 0x0d, 0xfb, 0x78, 0x17, 0xb6, 0x4b, 0x13, 0x13, 0xfa,
	0x00, 0x1f, 0xc0, 0xae, 0x75, 0x7c, 0x46, 0x35, 0xbc, 0x0f, 0x3b, 0x96, 0x49, 0x17, 0xd5, 0xf1,
	0x31, 0x1c, 0x38, 0x07, 0x52, 0xb4, 0x82, 0x0f, 0x61, 0xdf, 0x31, 0x33, 0xa2, 0x55, 0xa9, 0xcf,
	0x36, 0xbc, 0xa1, 0x7b, 0x52, 0x5f, 0x79, 0xd2, 0x42, 0xf7, 0x71, 0x0b, 0x9a, 0xb9, 0xd1, 0x09,
	0xad, 0xe1, 0x1d, 0x68, 0x99, 0x5c, 0x0d, 0x2d, 0x6e, 0x8c, 0x25, 0x68, 0x1d, 0x13, 0xfb, 0x2f,
	0xa7, 0x08, 0x84, 0xa5, 0x8e, 0x49, 0x01, 0x35, 0x71, 0xbb, 0xfc, 0xeb, 0x1f, 0xda, 0x10, 0xd7,
	0x58, 0xea, 0xd8, 0x68, 0x13, 0xef, 0xd9, 0xfe, 0xd3, 0x15, 0x6d, 0x49, 0xdd, 0x96, 0xb6, 0x8b,
	0x5a, 0xf2, 0x22, 0x6c, 0x2d, 0x0d, 0x21, 0xa9, 0xc3, 0xec, 0x41, 0x68, 0x5b, 0xe8, 0x28, 0x77,
	0x13, 0x84, 0xc5, 0x6d, 0x18, 0x6d, 0x00, 0xed, 0xe4, 0xad, 0xcf, 0xcc, 0x6c, 0x0b, 0x56, 0xa3,
	0x30, 0xa3, 0x5d, 0xc1, 0x6a, 0x56, 0x58, 0xb4, 0x87, 0xbb, 0x55, 0xbf, 0x91, 0xa0, 0x7d, 0x21,
	0x65, 0x56, 0x37, 0x44, 0xf4, 0x5d, 0x9b, 0xb5, 0x08, 0x1d, 0xe8, 0xc0, 0x97, 0x2a, 0x09, 0xea,
	0xe0, 0x93, 0x25, 0xab, 0x3d, 0x3a, 0xc4, 0xde, 0xb2, 0xe5, 0x1e, 0x1d, 0xc9, 0x1f, 0x94, 0xab,
	0x5e, 0x14, 0x3a, 0x16, 0x99, 0x94, 0x7b, 0x30, 0xa8, 0xfb, 0x78, 0xfb, 0x9f, 0xf5, 0xad, 0xdf,
	0xc8, 0x17, 0xa5, 0x3c, 0xe4, 0x2f, 0xef, 0xcb, 0xff, 0x46, 0xff, 0xe9, 0xff, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x78, 0x54, 0x7f, 0xce, 0x74, 0x1f, 0x00, 0x00,
}
