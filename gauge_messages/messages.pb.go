// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

package gauge_messages

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StepValidateResponse_ErrorType int32

const (
	StepValidateResponse_STEP_IMPLEMENTATION_NOT_FOUND StepValidateResponse_ErrorType = 0
	StepValidateResponse_DUPLICATE_STEP_IMPLEMENTATION StepValidateResponse_ErrorType = 1
)

var StepValidateResponse_ErrorType_name = map[int32]string{
	0: "STEP_IMPLEMENTATION_NOT_FOUND",
	1: "DUPLICATE_STEP_IMPLEMENTATION",
}
var StepValidateResponse_ErrorType_value = map[string]int32{
	"STEP_IMPLEMENTATION_NOT_FOUND": 0,
	"DUPLICATE_STEP_IMPLEMENTATION": 1,
}

func (x StepValidateResponse_ErrorType) String() string {
	return proto.EnumName(StepValidateResponse_ErrorType_name, int32(x))
}
func (StepValidateResponse_ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor1, []int{16, 0}
}

type Message_MessageType int32

const (
	Message_ExecutionStarting          Message_MessageType = 0
	Message_SpecExecutionStarting      Message_MessageType = 1
	Message_SpecExecutionEnding        Message_MessageType = 2
	Message_ScenarioExecutionStarting  Message_MessageType = 3
	Message_ScenarioExecutionEnding    Message_MessageType = 4
	Message_StepExecutionStarting      Message_MessageType = 5
	Message_StepExecutionEnding        Message_MessageType = 6
	Message_ExecuteStep                Message_MessageType = 7
	Message_ExecutionEnding            Message_MessageType = 8
	Message_StepValidateRequest        Message_MessageType = 9
	Message_StepValidateResponse       Message_MessageType = 10
	Message_ExecutionStatusResponse    Message_MessageType = 11
	Message_StepNamesRequest           Message_MessageType = 12
	Message_StepNamesResponse          Message_MessageType = 13
	Message_KillProcessRequest         Message_MessageType = 14
	Message_SuiteExecutionResult       Message_MessageType = 15
	Message_ScenarioDataStoreInit      Message_MessageType = 16
	Message_SpecDataStoreInit          Message_MessageType = 17
	Message_SuiteDataStoreInit         Message_MessageType = 18
	Message_StepNameRequest            Message_MessageType = 19
	Message_StepNameResponse           Message_MessageType = 20
	Message_RefactorRequest            Message_MessageType = 21
	Message_RefactorResponse           Message_MessageType = 22
	Message_UnsupportedMessageResponse Message_MessageType = 23
)

var Message_MessageType_name = map[int32]string{
	0:  "ExecutionStarting",
	1:  "SpecExecutionStarting",
	2:  "SpecExecutionEnding",
	3:  "ScenarioExecutionStarting",
	4:  "ScenarioExecutionEnding",
	5:  "StepExecutionStarting",
	6:  "StepExecutionEnding",
	7:  "ExecuteStep",
	8:  "ExecutionEnding",
	9:  "StepValidateRequest",
	10: "StepValidateResponse",
	11: "ExecutionStatusResponse",
	12: "StepNamesRequest",
	13: "StepNamesResponse",
	14: "KillProcessRequest",
	15: "SuiteExecutionResult",
	16: "ScenarioDataStoreInit",
	17: "SpecDataStoreInit",
	18: "SuiteDataStoreInit",
	19: "StepNameRequest",
	20: "StepNameResponse",
	21: "RefactorRequest",
	22: "RefactorResponse",
	23: "UnsupportedMessageResponse",
}
var Message_MessageType_value = map[string]int32{
	"ExecutionStarting":          0,
	"SpecExecutionStarting":      1,
	"SpecExecutionEnding":        2,
	"ScenarioExecutionStarting":  3,
	"ScenarioExecutionEnding":    4,
	"StepExecutionStarting":      5,
	"StepExecutionEnding":        6,
	"ExecuteStep":                7,
	"ExecutionEnding":            8,
	"StepValidateRequest":        9,
	"StepValidateResponse":       10,
	"ExecutionStatusResponse":    11,
	"StepNamesRequest":           12,
	"StepNamesResponse":          13,
	"KillProcessRequest":         14,
	"SuiteExecutionResult":       15,
	"ScenarioDataStoreInit":      16,
	"SpecDataStoreInit":          17,
	"SuiteDataStoreInit":         18,
	"StepNameRequest":            19,
	"StepNameResponse":           20,
	"RefactorRequest":            21,
	"RefactorResponse":           22,
	"UnsupportedMessageResponse": 23,
}

func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}
func (Message_MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{29, 0} }

// / Default request. Tells the runner to shutdown.
type KillProcessRequest struct {
}

func (m *KillProcessRequest) Reset()                    { *m = KillProcessRequest{} }
func (m *KillProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*KillProcessRequest) ProtoMessage()               {}
func (*KillProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

// / Sends to any request which needs a execution status as response
// / usually step execution, hooks etc will return this
type ExecutionStatusResponse struct {
	ExecutionResult *ProtoExecutionResult `protobuf:"bytes,1,opt,name=executionResult" json:"executionResult,omitempty"`
}

func (m *ExecutionStatusResponse) Reset()                    { *m = ExecutionStatusResponse{} }
func (m *ExecutionStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutionStatusResponse) ProtoMessage()               {}
func (*ExecutionStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ExecutionStatusResponse) GetExecutionResult() *ProtoExecutionResult {
	if m != nil {
		return m.ExecutionResult
	}
	return nil
}

// / Sent at start of Suite Execution. Tells the runner to execute `before_suite` hook.
type ExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ExecutionStartingRequest) Reset()                    { *m = ExecutionStartingRequest{} }
func (m *ExecutionStartingRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionStartingRequest) ProtoMessage()               {}
func (*ExecutionStartingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Suite Execution. Tells the runner to execute `after_suite` hook.
type ExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ExecutionEndingRequest) Reset()                    { *m = ExecutionEndingRequest{} }
func (m *ExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutionEndingRequest) ProtoMessage()               {}
func (*ExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at start of Spec Execution. Tells the runner to execute `before_spec` hook.
type SpecExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *SpecExecutionStartingRequest) Reset()                    { *m = SpecExecutionStartingRequest{} }
func (m *SpecExecutionStartingRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecExecutionStartingRequest) ProtoMessage()               {}
func (*SpecExecutionStartingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *SpecExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Spec Execution. Tells the runner to execute `after_spec` hook.
type SpecExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *SpecExecutionEndingRequest) Reset()                    { *m = SpecExecutionEndingRequest{} }
func (m *SpecExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecExecutionEndingRequest) ProtoMessage()               {}
func (*SpecExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SpecExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at start of Scenario Execution. Tells the runner to execute `before_scenario` hook.
type ScenarioExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ScenarioExecutionStartingRequest) Reset()         { *m = ScenarioExecutionStartingRequest{} }
func (m *ScenarioExecutionStartingRequest) String() string { return proto.CompactTextString(m) }
func (*ScenarioExecutionStartingRequest) ProtoMessage()    {}
func (*ScenarioExecutionStartingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor1, []int{6}
}

func (m *ScenarioExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Scenario Execution. Tells the runner to execute `after_scenario` hook.
type ScenarioExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *ScenarioExecutionEndingRequest) Reset()                    { *m = ScenarioExecutionEndingRequest{} }
func (m *ScenarioExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*ScenarioExecutionEndingRequest) ProtoMessage()               {}
func (*ScenarioExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ScenarioExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at start of Step Execution. Tells the runner to execute `before_step` hook.
type StepExecutionStartingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *StepExecutionStartingRequest) Reset()                    { *m = StepExecutionStartingRequest{} }
func (m *StepExecutionStartingRequest) String() string            { return proto.CompactTextString(m) }
func (*StepExecutionStartingRequest) ProtoMessage()               {}
func (*StepExecutionStartingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *StepExecutionStartingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Sent at end of Step Execution. Tells the runner to execute `after_step` hook.
type StepExecutionEndingRequest struct {
	CurrentExecutionInfo *ExecutionInfo `protobuf:"bytes,1,opt,name=currentExecutionInfo" json:"currentExecutionInfo,omitempty"`
}

func (m *StepExecutionEndingRequest) Reset()                    { *m = StepExecutionEndingRequest{} }
func (m *StepExecutionEndingRequest) String() string            { return proto.CompactTextString(m) }
func (*StepExecutionEndingRequest) ProtoMessage()               {}
func (*StepExecutionEndingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *StepExecutionEndingRequest) GetCurrentExecutionInfo() *ExecutionInfo {
	if m != nil {
		return m.CurrentExecutionInfo
	}
	return nil
}

// / Contains details of the execution.
// / Depending on the context (Step, Scenario, Spec or Suite), the respective fields are set.
type ExecutionInfo struct {
	// / Holds the information of the current Spec. Valid in context of Spec execution.
	CurrentSpec *SpecInfo `protobuf:"bytes,1,opt,name=currentSpec" json:"currentSpec,omitempty"`
	// / Holds the information of the current Scenario. Valid in context of Scenario execution.
	CurrentScenario *ScenarioInfo `protobuf:"bytes,2,opt,name=currentScenario" json:"currentScenario,omitempty"`
	// / Holds the information of the current Step. Valid in context of Step execution.
	CurrentStep *StepInfo `protobuf:"bytes,3,opt,name=currentStep" json:"currentStep,omitempty"`
	// / Stacktrace of the execution. Valid only if there is an error in execution.
	Stacktrace string `protobuf:"bytes,4,opt,name=stacktrace" json:"stacktrace,omitempty"`
}

func (m *ExecutionInfo) Reset()                    { *m = ExecutionInfo{} }
func (m *ExecutionInfo) String() string            { return proto.CompactTextString(m) }
func (*ExecutionInfo) ProtoMessage()               {}
func (*ExecutionInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *ExecutionInfo) GetCurrentSpec() *SpecInfo {
	if m != nil {
		return m.CurrentSpec
	}
	return nil
}

func (m *ExecutionInfo) GetCurrentScenario() *ScenarioInfo {
	if m != nil {
		return m.CurrentScenario
	}
	return nil
}

func (m *ExecutionInfo) GetCurrentStep() *StepInfo {
	if m != nil {
		return m.CurrentStep
	}
	return nil
}

func (m *ExecutionInfo) GetStacktrace() string {
	if m != nil {
		return m.Stacktrace
	}
	return ""
}

// / Contains details of the Spec execution.
type SpecInfo struct {
	// / Name of the current Spec being executed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// / Full File path containing the current Spec being executed.
	FileName string `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	// / Flag to indicate if the current Spec execution failed.
	IsFailed bool `protobuf:"varint,3,opt,name=isFailed" json:"isFailed,omitempty"`
	// / Tags relevant to the current Spec execution.
	Tags []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *SpecInfo) Reset()                    { *m = SpecInfo{} }
func (m *SpecInfo) String() string            { return proto.CompactTextString(m) }
func (*SpecInfo) ProtoMessage()               {}
func (*SpecInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *SpecInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpecInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SpecInfo) GetIsFailed() bool {
	if m != nil {
		return m.IsFailed
	}
	return false
}

func (m *SpecInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// / Contains details of the Scenario execution.
type ScenarioInfo struct {
	// / Name of the current Scenario being executed.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// / Flag to indicate if the current Scenario execution failed.
	IsFailed bool `protobuf:"varint,2,opt,name=isFailed" json:"isFailed,omitempty"`
	// / Tags relevant to the current Scenario execution.
	Tags []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *ScenarioInfo) Reset()                    { *m = ScenarioInfo{} }
func (m *ScenarioInfo) String() string            { return proto.CompactTextString(m) }
func (*ScenarioInfo) ProtoMessage()               {}
func (*ScenarioInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ScenarioInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScenarioInfo) GetIsFailed() bool {
	if m != nil {
		return m.IsFailed
	}
	return false
}

func (m *ScenarioInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// / Contains details of the Step execution.
type StepInfo struct {
	// / The current request to execute Step
	Step *ExecuteStepRequest `protobuf:"bytes,1,opt,name=step" json:"step,omitempty"`
	// / Flag to indicate if the current Step execution failed.
	IsFailed bool `protobuf:"varint,2,opt,name=isFailed" json:"isFailed,omitempty"`
	// / The current stack trace in case of failure
	StackTrace string `protobuf:"bytes,3,opt,name=stackTrace" json:"stackTrace,omitempty"`
}

func (m *StepInfo) Reset()                    { *m = StepInfo{} }
func (m *StepInfo) String() string            { return proto.CompactTextString(m) }
func (*StepInfo) ProtoMessage()               {}
func (*StepInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *StepInfo) GetStep() *ExecuteStepRequest {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *StepInfo) GetIsFailed() bool {
	if m != nil {
		return m.IsFailed
	}
	return false
}

func (m *StepInfo) GetStackTrace() string {
	if m != nil {
		return m.StackTrace
	}
	return ""
}

// / Request sent ot the runner to Execute a Step
type ExecuteStepRequest struct {
	// / Contains the actual text of the Step being executed.
	// / This contains the parameters as defined in the Spec.
	ActualStepText string `protobuf:"bytes,1,opt,name=actualStepText" json:"actualStepText,omitempty"`
	// / Contains the parsed text of the Step being executed.
	// / The paramters are replaced with placeholders.
	ParsedStepText string `protobuf:"bytes,2,opt,name=parsedStepText" json:"parsedStepText,omitempty"`
	// / Flag to indicate if the execution of the Scenario, containing the current Step, failed.
	ScenarioFailing bool `protobuf:"varint,3,opt,name=scenarioFailing" json:"scenarioFailing,omitempty"`
	// / Collection of parameters applicable to the current Step.
	Parameters []*Parameter `protobuf:"bytes,4,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ExecuteStepRequest) Reset()                    { *m = ExecuteStepRequest{} }
func (m *ExecuteStepRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecuteStepRequest) ProtoMessage()               {}
func (*ExecuteStepRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *ExecuteStepRequest) GetActualStepText() string {
	if m != nil {
		return m.ActualStepText
	}
	return ""
}

func (m *ExecuteStepRequest) GetParsedStepText() string {
	if m != nil {
		return m.ParsedStepText
	}
	return ""
}

func (m *ExecuteStepRequest) GetScenarioFailing() bool {
	if m != nil {
		return m.ScenarioFailing
	}
	return false
}

func (m *ExecuteStepRequest) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// / Request sent ot the runner to check if given Step is valid.
// / The runner should check if there is an implementation defined for the given Step Text.
type StepValidateRequest struct {
	// / The text is used to lookup Step implementation
	StepText string `protobuf:"bytes,1,opt,name=stepText" json:"stepText,omitempty"`
	// / The number of paramters in the Step
	NumberOfParameters int32 `protobuf:"varint,2,opt,name=numberOfParameters" json:"numberOfParameters,omitempty"`
	// /This is use to generate step implementation template
	StepValue *ProtoStepValue `protobuf:"bytes,3,opt,name=stepValue" json:"stepValue,omitempty"`
}

func (m *StepValidateRequest) Reset()                    { *m = StepValidateRequest{} }
func (m *StepValidateRequest) String() string            { return proto.CompactTextString(m) }
func (*StepValidateRequest) ProtoMessage()               {}
func (*StepValidateRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

func (m *StepValidateRequest) GetStepText() string {
	if m != nil {
		return m.StepText
	}
	return ""
}

func (m *StepValidateRequest) GetNumberOfParameters() int32 {
	if m != nil {
		return m.NumberOfParameters
	}
	return 0
}

func (m *StepValidateRequest) GetStepValue() *ProtoStepValue {
	if m != nil {
		return m.StepValue
	}
	return nil
}

// / Response of StepValidateRequest.
// / The runner tells the caller if the Request was valid,
// / i.e. an implementation exists for given Step text.
// / Returns an error message if it is an error response.
type StepValidateResponse struct {
	IsValid      bool                           `protobuf:"varint,1,opt,name=isValid" json:"isValid,omitempty"`
	ErrorMessage string                         `protobuf:"bytes,2,opt,name=errorMessage" json:"errorMessage,omitempty"`
	ErrorType    StepValidateResponse_ErrorType `protobuf:"varint,3,opt,name=errorType,enum=gauge.messages.StepValidateResponse_ErrorType" json:"errorType,omitempty"`
	Suggestion   string                         `protobuf:"bytes,4,opt,name=suggestion" json:"suggestion,omitempty"`
}

func (m *StepValidateResponse) Reset()                    { *m = StepValidateResponse{} }
func (m *StepValidateResponse) String() string            { return proto.CompactTextString(m) }
func (*StepValidateResponse) ProtoMessage()               {}
func (*StepValidateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

func (m *StepValidateResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *StepValidateResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *StepValidateResponse) GetErrorType() StepValidateResponse_ErrorType {
	if m != nil {
		return m.ErrorType
	}
	return StepValidateResponse_STEP_IMPLEMENTATION_NOT_FOUND
}

func (m *StepValidateResponse) GetSuggestion() string {
	if m != nil {
		return m.Suggestion
	}
	return ""
}

// / Result of the Suite Execution.
type SuiteExecutionResult struct {
	SuiteResult *ProtoSuiteResult `protobuf:"bytes,1,opt,name=suiteResult" json:"suiteResult,omitempty"`
}

func (m *SuiteExecutionResult) Reset()                    { *m = SuiteExecutionResult{} }
func (m *SuiteExecutionResult) String() string            { return proto.CompactTextString(m) }
func (*SuiteExecutionResult) ProtoMessage()               {}
func (*SuiteExecutionResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *SuiteExecutionResult) GetSuiteResult() *ProtoSuiteResult {
	if m != nil {
		return m.SuiteResult
	}
	return nil
}

// / Requests Gauge to give all Step Names.
type StepNamesRequest struct {
}

func (m *StepNamesRequest) Reset()                    { *m = StepNamesRequest{} }
func (m *StepNamesRequest) String() string            { return proto.CompactTextString(m) }
func (*StepNamesRequest) ProtoMessage()               {}
func (*StepNamesRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

// / Response to StepNamesRequest
type StepNamesResponse struct {
	// / Collection of strings corresponding to Step texts.
	Steps []string `protobuf:"bytes,1,rep,name=steps" json:"steps,omitempty"`
}

func (m *StepNamesResponse) Reset()                    { *m = StepNamesResponse{} }
func (m *StepNamesResponse) String() string            { return proto.CompactTextString(m) }
func (*StepNamesResponse) ProtoMessage()               {}
func (*StepNamesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

func (m *StepNamesResponse) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

// / Request runner to initialize Scenario DataStore
// / Scenario Datastore is reset after every Scenario execution.
type ScenarioDataStoreInitRequest struct {
}

func (m *ScenarioDataStoreInitRequest) Reset()                    { *m = ScenarioDataStoreInitRequest{} }
func (m *ScenarioDataStoreInitRequest) String() string            { return proto.CompactTextString(m) }
func (*ScenarioDataStoreInitRequest) ProtoMessage()               {}
func (*ScenarioDataStoreInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

// / Request runner to initialize Spec DataStore
// / Spec Datastore is reset after every Spec execution.
type SpecDataStoreInitRequest struct {
}

func (m *SpecDataStoreInitRequest) Reset()                    { *m = SpecDataStoreInitRequest{} }
func (m *SpecDataStoreInitRequest) String() string            { return proto.CompactTextString(m) }
func (*SpecDataStoreInitRequest) ProtoMessage()               {}
func (*SpecDataStoreInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{21} }

// / Request runner to initialize Suite DataStore
// / Suite Datastore is reset after every Suite execution.
type SuiteDataStoreInitRequest struct {
}

func (m *SuiteDataStoreInitRequest) Reset()                    { *m = SuiteDataStoreInitRequest{} }
func (m *SuiteDataStoreInitRequest) String() string            { return proto.CompactTextString(m) }
func (*SuiteDataStoreInitRequest) ProtoMessage()               {}
func (*SuiteDataStoreInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{22} }

// / Holds the new and old positions of a parameter.
// / Used when refactoring a Step.
type ParameterPosition struct {
	OldPosition int32 `protobuf:"varint,1,opt,name=oldPosition" json:"oldPosition,omitempty"`
	NewPosition int32 `protobuf:"varint,2,opt,name=newPosition" json:"newPosition,omitempty"`
}

func (m *ParameterPosition) Reset()                    { *m = ParameterPosition{} }
func (m *ParameterPosition) String() string            { return proto.CompactTextString(m) }
func (*ParameterPosition) ProtoMessage()               {}
func (*ParameterPosition) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{23} }

func (m *ParameterPosition) GetOldPosition() int32 {
	if m != nil {
		return m.OldPosition
	}
	return 0
}

func (m *ParameterPosition) GetNewPosition() int32 {
	if m != nil {
		return m.NewPosition
	}
	return 0
}

// / Tells the runner to refactor the specified Step.
type RefactorRequest struct {
	// / Old value, used to lookup Step to refactor
	OldStepValue *ProtoStepValue `protobuf:"bytes,1,opt,name=oldStepValue" json:"oldStepValue,omitempty"`
	// / New value, the to-be value of Step being refactored.
	NewStepValue *ProtoStepValue `protobuf:"bytes,2,opt,name=newStepValue" json:"newStepValue,omitempty"`
	// / Holds parameter positions of all parameters. Contains old and new parameter positions.
	ParamPositions []*ParameterPosition `protobuf:"bytes,3,rep,name=paramPositions" json:"paramPositions,omitempty"`
}

func (m *RefactorRequest) Reset()                    { *m = RefactorRequest{} }
func (m *RefactorRequest) String() string            { return proto.CompactTextString(m) }
func (*RefactorRequest) ProtoMessage()               {}
func (*RefactorRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{24} }

func (m *RefactorRequest) GetOldStepValue() *ProtoStepValue {
	if m != nil {
		return m.OldStepValue
	}
	return nil
}

func (m *RefactorRequest) GetNewStepValue() *ProtoStepValue {
	if m != nil {
		return m.NewStepValue
	}
	return nil
}

func (m *RefactorRequest) GetParamPositions() []*ParameterPosition {
	if m != nil {
		return m.ParamPositions
	}
	return nil
}

// / Response of a RefactorRequest
type RefactorResponse struct {
	// / Flag indicating the success of Refactor operation.
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// / Error message, valid only if Refactor wasn't successful
	Error string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// / List of files that were affected because of the refactoring.
	FilesChanged []string `protobuf:"bytes,3,rep,name=filesChanged" json:"filesChanged,omitempty"`
}

func (m *RefactorResponse) Reset()                    { *m = RefactorResponse{} }
func (m *RefactorResponse) String() string            { return proto.CompactTextString(m) }
func (*RefactorResponse) ProtoMessage()               {}
func (*RefactorResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{25} }

func (m *RefactorResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RefactorResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RefactorResponse) GetFilesChanged() []string {
	if m != nil {
		return m.FilesChanged
	}
	return nil
}

// / Request for details on a Single Step.
type StepNameRequest struct {
	// / Step text to lookup the Step.
	// / This is the parsed step value, i.e. with placeholders for parameters.
	StepValue string `protobuf:"bytes,1,opt,name=stepValue" json:"stepValue,omitempty"`
}

func (m *StepNameRequest) Reset()                    { *m = StepNameRequest{} }
func (m *StepNameRequest) String() string            { return proto.CompactTextString(m) }
func (*StepNameRequest) ProtoMessage()               {}
func (*StepNameRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{26} }

func (m *StepNameRequest) GetStepValue() string {
	if m != nil {
		return m.StepValue
	}
	return ""
}

// / Response to StepNameRequest.
type StepNameResponse struct {
	// / Flag indicating if there is a match for the given Step Text.
	IsStepPresent bool `protobuf:"varint,1,opt,name=isStepPresent" json:"isStepPresent,omitempty"`
	// / The Step name of the given step.
	StepName []string `protobuf:"bytes,2,rep,name=stepName" json:"stepName,omitempty"`
	// / Flag indicating if the given Step is an alias.
	HasAlias bool `protobuf:"varint,3,opt,name=hasAlias" json:"hasAlias,omitempty"`
}

func (m *StepNameResponse) Reset()                    { *m = StepNameResponse{} }
func (m *StepNameResponse) String() string            { return proto.CompactTextString(m) }
func (*StepNameResponse) ProtoMessage()               {}
func (*StepNameResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{27} }

func (m *StepNameResponse) GetIsStepPresent() bool {
	if m != nil {
		return m.IsStepPresent
	}
	return false
}

func (m *StepNameResponse) GetStepName() []string {
	if m != nil {
		return m.StepName
	}
	return nil
}

func (m *StepNameResponse) GetHasAlias() bool {
	if m != nil {
		return m.HasAlias
	}
	return false
}

// / Response when a unsupported message request is sent.
type UnsupportedMessageResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UnsupportedMessageResponse) Reset()                    { *m = UnsupportedMessageResponse{} }
func (m *UnsupportedMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*UnsupportedMessageResponse) ProtoMessage()               {}
func (*UnsupportedMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{28} }

func (m *UnsupportedMessageResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// / This is the message which gets transferred all the time
// / with proper message type set
// / One of the Request/Response fields will have value, depending on the MessageType set.
type Message struct {
	MessageType Message_MessageType `protobuf:"varint,1,opt,name=messageType,enum=gauge.messages.Message_MessageType" json:"messageType,omitempty"`
	// / A unique id to represent this message. A response to the message should copy over this value.
	// / This is used to synchronize messages & responses
	MessageId int64 `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
	// / [ExecutionStartingRequest](#gauge.messages.ExecutionStartingRequest)
	ExecutionStartingRequest *ExecutionStartingRequest `protobuf:"bytes,3,opt,name=executionStartingRequest" json:"executionStartingRequest,omitempty"`
	// / [SpecExecutionStartingRequest](#gauge.messages.SpecExecutionStartingRequest)
	SpecExecutionStartingRequest *SpecExecutionStartingRequest `protobuf:"bytes,4,opt,name=specExecutionStartingRequest" json:"specExecutionStartingRequest,omitempty"`
	// / [SpecExecutionEndingRequest](#gauge.messages.SpecExecutionEndingRequest)
	SpecExecutionEndingRequest *SpecExecutionEndingRequest `protobuf:"bytes,5,opt,name=specExecutionEndingRequest" json:"specExecutionEndingRequest,omitempty"`
	// / [ScenarioExecutionStartingRequest](#gauge.messages.ScenarioExecutionStartingRequest)
	ScenarioExecutionStartingRequest *ScenarioExecutionStartingRequest `protobuf:"bytes,6,opt,name=scenarioExecutionStartingRequest" json:"scenarioExecutionStartingRequest,omitempty"`
	// / [ScenarioExecutionEndingRequest](#gauge.messages.ScenarioExecutionEndingRequest)
	ScenarioExecutionEndingRequest *ScenarioExecutionEndingRequest `protobuf:"bytes,7,opt,name=scenarioExecutionEndingRequest" json:"scenarioExecutionEndingRequest,omitempty"`
	// / [StepExecutionStartingRequest](#gauge.messages.StepExecutionStartingRequest)
	StepExecutionStartingRequest *StepExecutionStartingRequest `protobuf:"bytes,8,opt,name=stepExecutionStartingRequest" json:"stepExecutionStartingRequest,omitempty"`
	// / [StepExecutionEndingRequest](#gauge.messages.StepExecutionEndingRequest)
	StepExecutionEndingRequest *StepExecutionEndingRequest `protobuf:"bytes,9,opt,name=stepExecutionEndingRequest" json:"stepExecutionEndingRequest,omitempty"`
	// / [ExecuteStepRequest](#gauge.messages.ExecuteStepRequest)
	ExecuteStepRequest *ExecuteStepRequest `protobuf:"bytes,10,opt,name=executeStepRequest" json:"executeStepRequest,omitempty"`
	// / [ExecutionEndingRequest](#gauge.messages.ExecutionEndingRequest)
	ExecutionEndingRequest *ExecutionEndingRequest `protobuf:"bytes,11,opt,name=executionEndingRequest" json:"executionEndingRequest,omitempty"`
	// / [StepValidateRequest](#gauge.messages.StepValidateRequest)
	StepValidateRequest *StepValidateRequest `protobuf:"bytes,12,opt,name=stepValidateRequest" json:"stepValidateRequest,omitempty"`
	// / [StepValidateResponse](#gauge.messages.StepValidateResponse)
	StepValidateResponse *StepValidateResponse `protobuf:"bytes,13,opt,name=stepValidateResponse" json:"stepValidateResponse,omitempty"`
	// / [ExecutionStatusResponse](#gauge.messages.ExecutionStatusResponse)
	ExecutionStatusResponse *ExecutionStatusResponse `protobuf:"bytes,14,opt,name=executionStatusResponse" json:"executionStatusResponse,omitempty"`
	// / [StepNamesRequest](#gauge.messages.StepNamesRequest)
	StepNamesRequest *StepNamesRequest `protobuf:"bytes,15,opt,name=stepNamesRequest" json:"stepNamesRequest,omitempty"`
	// / [StepNamesResponse](#gauge.messages.StepNamesResponse)
	StepNamesResponse *StepNamesResponse `protobuf:"bytes,16,opt,name=stepNamesResponse" json:"stepNamesResponse,omitempty"`
	// / [SuiteExecutionResult ](#gauge.messages.SuiteExecutionResult )
	SuiteExecutionResult *SuiteExecutionResult `protobuf:"bytes,17,opt,name=suiteExecutionResult" json:"suiteExecutionResult,omitempty"`
	// / [KillProcessRequest](#gauge.messages.KillProcessRequest)
	KillProcessRequest *KillProcessRequest `protobuf:"bytes,18,opt,name=killProcessRequest" json:"killProcessRequest,omitempty"`
	// / [ScenarioDataStoreInitRequest](#gauge.messages.ScenarioDataStoreInitRequest)
	ScenarioDataStoreInitRequest *ScenarioDataStoreInitRequest `protobuf:"bytes,19,opt,name=scenarioDataStoreInitRequest" json:"scenarioDataStoreInitRequest,omitempty"`
	// / [SpecDataStoreInitRequest](#gauge.messages.SpecDataStoreInitRequest)
	SpecDataStoreInitRequest *SpecDataStoreInitRequest `protobuf:"bytes,20,opt,name=specDataStoreInitRequest" json:"specDataStoreInitRequest,omitempty"`
	// / [SuiteDataStoreInitRequest](#gauge.messages.SuiteDataStoreInitRequest)
	SuiteDataStoreInitRequest *SuiteDataStoreInitRequest `protobuf:"bytes,21,opt,name=suiteDataStoreInitRequest" json:"suiteDataStoreInitRequest,omitempty"`
	// / [StepNameRequest](#gauge.messages.StepNameRequest)
	StepNameRequest *StepNameRequest `protobuf:"bytes,22,opt,name=stepNameRequest" json:"stepNameRequest,omitempty"`
	// / [StepNameResponse](#gauge.messages.StepNameResponse)
	StepNameResponse *StepNameResponse `protobuf:"bytes,23,opt,name=stepNameResponse" json:"stepNameResponse,omitempty"`
	// / [RefactorRequest](#gauge.messages.RefactorRequest)
	RefactorRequest *RefactorRequest `protobuf:"bytes,24,opt,name=refactorRequest" json:"refactorRequest,omitempty"`
	// / [RefactorResponse](#gauge.messages.RefactorResponse)
	RefactorResponse *RefactorResponse `protobuf:"bytes,25,opt,name=refactorResponse" json:"refactorResponse,omitempty"`
	// / [UnsupportedMessageResponse](#gauge.messages.UnsupportedMessageResponse)
	UnsupportedMessageResponse *UnsupportedMessageResponse `protobuf:"bytes,26,opt,name=unsupportedMessageResponse" json:"unsupportedMessageResponse,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{29} }

func (m *Message) GetMessageType() Message_MessageType {
	if m != nil {
		return m.MessageType
	}
	return Message_ExecutionStarting
}

func (m *Message) GetMessageId() int64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Message) GetExecutionStartingRequest() *ExecutionStartingRequest {
	if m != nil {
		return m.ExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetSpecExecutionStartingRequest() *SpecExecutionStartingRequest {
	if m != nil {
		return m.SpecExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetSpecExecutionEndingRequest() *SpecExecutionEndingRequest {
	if m != nil {
		return m.SpecExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetScenarioExecutionStartingRequest() *ScenarioExecutionStartingRequest {
	if m != nil {
		return m.ScenarioExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetScenarioExecutionEndingRequest() *ScenarioExecutionEndingRequest {
	if m != nil {
		return m.ScenarioExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetStepExecutionStartingRequest() *StepExecutionStartingRequest {
	if m != nil {
		return m.StepExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetStepExecutionEndingRequest() *StepExecutionEndingRequest {
	if m != nil {
		return m.StepExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetExecuteStepRequest() *ExecuteStepRequest {
	if m != nil {
		return m.ExecuteStepRequest
	}
	return nil
}

func (m *Message) GetExecutionEndingRequest() *ExecutionEndingRequest {
	if m != nil {
		return m.ExecutionEndingRequest
	}
	return nil
}

func (m *Message) GetStepValidateRequest() *StepValidateRequest {
	if m != nil {
		return m.StepValidateRequest
	}
	return nil
}

func (m *Message) GetStepValidateResponse() *StepValidateResponse {
	if m != nil {
		return m.StepValidateResponse
	}
	return nil
}

func (m *Message) GetExecutionStatusResponse() *ExecutionStatusResponse {
	if m != nil {
		return m.ExecutionStatusResponse
	}
	return nil
}

func (m *Message) GetStepNamesRequest() *StepNamesRequest {
	if m != nil {
		return m.StepNamesRequest
	}
	return nil
}

func (m *Message) GetStepNamesResponse() *StepNamesResponse {
	if m != nil {
		return m.StepNamesResponse
	}
	return nil
}

func (m *Message) GetSuiteExecutionResult() *SuiteExecutionResult {
	if m != nil {
		return m.SuiteExecutionResult
	}
	return nil
}

func (m *Message) GetKillProcessRequest() *KillProcessRequest {
	if m != nil {
		return m.KillProcessRequest
	}
	return nil
}

func (m *Message) GetScenarioDataStoreInitRequest() *ScenarioDataStoreInitRequest {
	if m != nil {
		return m.ScenarioDataStoreInitRequest
	}
	return nil
}

func (m *Message) GetSpecDataStoreInitRequest() *SpecDataStoreInitRequest {
	if m != nil {
		return m.SpecDataStoreInitRequest
	}
	return nil
}

func (m *Message) GetSuiteDataStoreInitRequest() *SuiteDataStoreInitRequest {
	if m != nil {
		return m.SuiteDataStoreInitRequest
	}
	return nil
}

func (m *Message) GetStepNameRequest() *StepNameRequest {
	if m != nil {
		return m.StepNameRequest
	}
	return nil
}

func (m *Message) GetStepNameResponse() *StepNameResponse {
	if m != nil {
		return m.StepNameResponse
	}
	return nil
}

func (m *Message) GetRefactorRequest() *RefactorRequest {
	if m != nil {
		return m.RefactorRequest
	}
	return nil
}

func (m *Message) GetRefactorResponse() *RefactorResponse {
	if m != nil {
		return m.RefactorResponse
	}
	return nil
}

func (m *Message) GetUnsupportedMessageResponse() *UnsupportedMessageResponse {
	if m != nil {
		return m.UnsupportedMessageResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*KillProcessRequest)(nil), "gauge.messages.KillProcessRequest")
	proto.RegisterType((*ExecutionStatusResponse)(nil), "gauge.messages.ExecutionStatusResponse")
	proto.RegisterType((*ExecutionStartingRequest)(nil), "gauge.messages.ExecutionStartingRequest")
	proto.RegisterType((*ExecutionEndingRequest)(nil), "gauge.messages.ExecutionEndingRequest")
	proto.RegisterType((*SpecExecutionStartingRequest)(nil), "gauge.messages.SpecExecutionStartingRequest")
	proto.RegisterType((*SpecExecutionEndingRequest)(nil), "gauge.messages.SpecExecutionEndingRequest")
	proto.RegisterType((*ScenarioExecutionStartingRequest)(nil), "gauge.messages.ScenarioExecutionStartingRequest")
	proto.RegisterType((*ScenarioExecutionEndingRequest)(nil), "gauge.messages.ScenarioExecutionEndingRequest")
	proto.RegisterType((*StepExecutionStartingRequest)(nil), "gauge.messages.StepExecutionStartingRequest")
	proto.RegisterType((*StepExecutionEndingRequest)(nil), "gauge.messages.StepExecutionEndingRequest")
	proto.RegisterType((*ExecutionInfo)(nil), "gauge.messages.ExecutionInfo")
	proto.RegisterType((*SpecInfo)(nil), "gauge.messages.SpecInfo")
	proto.RegisterType((*ScenarioInfo)(nil), "gauge.messages.ScenarioInfo")
	proto.RegisterType((*StepInfo)(nil), "gauge.messages.StepInfo")
	proto.RegisterType((*ExecuteStepRequest)(nil), "gauge.messages.ExecuteStepRequest")
	proto.RegisterType((*StepValidateRequest)(nil), "gauge.messages.StepValidateRequest")
	proto.RegisterType((*StepValidateResponse)(nil), "gauge.messages.StepValidateResponse")
	proto.RegisterType((*SuiteExecutionResult)(nil), "gauge.messages.SuiteExecutionResult")
	proto.RegisterType((*StepNamesRequest)(nil), "gauge.messages.StepNamesRequest")
	proto.RegisterType((*StepNamesResponse)(nil), "gauge.messages.StepNamesResponse")
	proto.RegisterType((*ScenarioDataStoreInitRequest)(nil), "gauge.messages.ScenarioDataStoreInitRequest")
	proto.RegisterType((*SpecDataStoreInitRequest)(nil), "gauge.messages.SpecDataStoreInitRequest")
	proto.RegisterType((*SuiteDataStoreInitRequest)(nil), "gauge.messages.SuiteDataStoreInitRequest")
	proto.RegisterType((*ParameterPosition)(nil), "gauge.messages.ParameterPosition")
	proto.RegisterType((*RefactorRequest)(nil), "gauge.messages.RefactorRequest")
	proto.RegisterType((*RefactorResponse)(nil), "gauge.messages.RefactorResponse")
	proto.RegisterType((*StepNameRequest)(nil), "gauge.messages.StepNameRequest")
	proto.RegisterType((*StepNameResponse)(nil), "gauge.messages.StepNameResponse")
	proto.RegisterType((*UnsupportedMessageResponse)(nil), "gauge.messages.UnsupportedMessageResponse")
	proto.RegisterType((*Message)(nil), "gauge.messages.Message")
	proto.RegisterEnum("gauge.messages.StepValidateResponse_ErrorType", StepValidateResponse_ErrorType_name, StepValidateResponse_ErrorType_value)
	proto.RegisterEnum("gauge.messages.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x59, 0x4d, 0x6f, 0x1b, 0x37,
	0x13, 0x8e, 0xfc, 0x11, 0xcb, 0x23, 0xdb, 0xa2, 0x69, 0xd9, 0xa6, 0x15, 0xc7, 0xaf, 0xb3, 0x09,
	0xf2, 0x3a, 0x2f, 0x5e, 0xa8, 0x85, 0x0b, 0x04, 0x68, 0xd1, 0x4b, 0x3e, 0x94, 0x42, 0xa8, 0x63,
	0x2b, 0xb4, 0xdc, 0x16, 0x3d, 0xd4, 0xd8, 0x48, 0xb4, 0xb2, 0x89, 0xbc, 0xbb, 0x59, 0xee, 0x36,
	0x29, 0x50, 0xf4, 0x5f, 0xf4, 0xdc, 0x7b, 0xff, 0x49, 0xff, 0x42, 0x81, 0xde, 0x7a, 0xef, 0x5f,
	0x28, 0x48, 0x91, 0xab, 0xfd, 0x20, 0xd7, 0xb9, 0xc4, 0xa7, 0x98, 0xc3, 0x99, 0x67, 0x86, 0xc3,
	0x99, 0xe1, 0xa3, 0x0d, 0xac, 0x5d, 0x32, 0xce, 0xdd, 0x31, 0xe3, 0x9d, 0x30, 0x0a, 0xe2, 0x00,
	0xaf, 0x8d, 0xdd, 0x64, 0xcc, 0x3a, 0x5a, 0xda, 0x06, 0x1e, 0xb2, 0xe1, 0x74, 0xcf, 0x69, 0x01,
	0xfe, 0xda, 0x9b, 0x4c, 0xfa, 0x51, 0x30, 0x64, 0x9c, 0x53, 0xf6, 0x36, 0x61, 0x3c, 0x76, 0x3c,
	0xd8, 0xee, 0xbe, 0x67, 0xc3, 0x24, 0xf6, 0x02, 0xff, 0x34, 0x76, 0xe3, 0x84, 0x53, 0xc6, 0xc3,
	0xc0, 0xe7, 0x0c, 0x1f, 0x43, 0x93, 0xe9, 0x2d, 0xca, 0x78, 0x32, 0x89, 0x49, 0x6d, 0xbf, 0x76,
	0xd0, 0x38, 0xbc, 0xd7, 0xc9, 0xbb, 0xe9, 0xf4, 0x85, 0x83, 0x6e, 0x5e, 0x97, 0x16, 0x8d, 0x9d,
	0x4b, 0x20, 0x59, 0x57, 0x51, 0xec, 0xf9, 0x63, 0x15, 0x06, 0x7e, 0x01, 0xad, 0x61, 0x12, 0x45,
	0xcc, 0x8f, 0x53, 0x95, 0x9e, 0x7f, 0x11, 0x28, 0x87, 0xb7, 0x8b, 0x0e, 0x73, 0x4a, 0xd4, 0x68,
	0xea, 0xbc, 0x81, 0xad, 0x54, 0xd0, 0xf5, 0x47, 0x1f, 0xd7, 0xd9, 0x5b, 0xd8, 0x3d, 0x0d, 0xd9,
	0xf0, 0x3a, 0xcf, 0x17, 0x40, 0x3b, 0xe7, 0xf2, 0xa3, 0x9f, 0x31, 0x81, 0xfd, 0xd3, 0x21, 0xf3,
	0xdd, 0xc8, 0x0b, 0xae, 0xf3, 0x9c, 0x1c, 0xf6, 0x4a, 0x6e, 0xaf, 0xe5, 0x3e, 0x63, 0x16, 0x5e,
	0xf7, 0x7d, 0x66, 0x5d, 0x7e, 0xf4, 0x33, 0xfe, 0x53, 0x83, 0xd5, 0x9c, 0x04, 0x7f, 0x01, 0x0d,
	0xa5, 0x29, 0x2a, 0x4b, 0x61, 0x93, 0x22, 0xb6, 0xd8, 0x93, 0xb0, 0x59, 0x65, 0xfc, 0x0c, 0x9a,
	0x7a, 0xa9, 0x6e, 0x8b, 0xcc, 0x49, 0xfb, 0xdd, 0x92, 0xbd, 0xda, 0x97, 0x18, 0x45, 0xa3, 0x6c,
	0x0c, 0x31, 0x0b, 0xc9, 0xbc, 0x25, 0x86, 0x98, 0x85, 0xf9, 0x18, 0x62, 0x16, 0xe2, 0x3d, 0x00,
	0x1e, 0xbb, 0xc3, 0x37, 0x71, 0xe4, 0x0e, 0x19, 0x59, 0xd8, 0xaf, 0x1d, 0x2c, 0xd3, 0x8c, 0xc4,
	0x79, 0x0d, 0x75, 0x1d, 0x3c, 0xc6, 0xb0, 0xe0, 0xbb, 0x97, 0x4c, 0x1e, 0x72, 0x99, 0xca, 0xbf,
	0x71, 0x1b, 0xea, 0x17, 0xde, 0x84, 0x1d, 0x0b, 0xf9, 0x9c, 0x94, 0xa7, 0x6b, 0xb1, 0xe7, 0xf1,
	0x67, 0xae, 0x37, 0x61, 0x23, 0x19, 0x54, 0x9d, 0xa6, 0x6b, 0x81, 0x15, 0xbb, 0x63, 0x4e, 0x16,
	0xf6, 0xe7, 0x05, 0x96, 0xf8, 0xdb, 0xa1, 0xb0, 0x92, 0x3d, 0xa8, 0xcd, 0x5f, 0x8a, 0x39, 0x67,
	0xc1, 0x9c, 0xcf, 0x60, 0xfe, 0x02, 0x75, 0x7d, 0x70, 0xfc, 0x10, 0x16, 0xb8, 0x48, 0xd0, 0xf4,
	0x92, 0x1c, 0x73, 0x01, 0x30, 0xa1, 0xae, 0x4a, 0x88, 0x4a, 0xfd, 0x4a, 0x9f, 0x3a, 0x7f, 0x03,
	0x99, 0xbf, 0xf9, 0x4c, 0xfe, 0xa4, 0xc4, 0xf9, 0xa3, 0x06, 0xb8, 0x0c, 0x8c, 0xef, 0xc3, 0x9a,
	0x3b, 0x8c, 0x13, 0x77, 0x22, 0x84, 0x03, 0xf6, 0x3e, 0x56, 0x87, 0x2c, 0x48, 0x85, 0x5e, 0xe8,
	0x46, 0x9c, 0x8d, 0x52, 0xbd, 0x69, 0x92, 0x0b, 0x52, 0x7c, 0x00, 0x4d, 0xae, 0x52, 0x27, 0x02,
	0xf3, 0xfc, 0xb1, 0xca, 0x78, 0x51, 0x8c, 0x3f, 0x07, 0x08, 0xdd, 0xc8, 0xbd, 0x64, 0x31, 0x8b,
	0xa6, 0xe9, 0x6f, 0x1c, 0xee, 0x94, 0x5e, 0x27, 0xad, 0x41, 0x33, 0xca, 0xce, 0x6f, 0x35, 0xd8,
	0x10, 0x1e, 0xbf, 0x71, 0x27, 0xde, 0xc8, 0x8d, 0x99, 0x3e, 0x4c, 0x1b, 0xea, 0x3c, 0x7f, 0x8c,
	0x74, 0x8d, 0x3b, 0x80, 0xfd, 0xe4, 0xf2, 0x25, 0x8b, 0x4e, 0x2e, 0xfa, 0x33, 0xb7, 0xe2, 0x10,
	0x8b, 0xd4, 0xb0, 0x83, 0xbf, 0x84, 0x65, 0x3e, 0x75, 0x91, 0x30, 0x55, 0xc9, 0x7b, 0xc6, 0xb7,
	0xf3, 0x54, 0x6b, 0xd1, 0x99, 0x81, 0xf3, 0xeb, 0x1c, 0xb4, 0xf2, 0x11, 0xaa, 0x87, 0x99, 0xc0,
	0x92, 0xc7, 0xa5, 0x54, 0x46, 0x58, 0xa7, 0x7a, 0x89, 0x1d, 0x58, 0x61, 0x51, 0x14, 0x44, 0xcf,
	0xa7, 0xe8, 0x2a, 0xbf, 0x39, 0x19, 0x3e, 0x82, 0x65, 0xb9, 0x1e, 0xfc, 0x14, 0x4e, 0x83, 0x5a,
	0x3b, 0xec, 0x98, 0xda, 0xab, 0xe8, 0xb6, 0xd3, 0xd5, 0x56, 0x74, 0x06, 0x20, 0x4b, 0x26, 0x19,
	0x8f, 0x19, 0x17, 0x43, 0x24, 0x6d, 0xb9, 0x54, 0xe2, 0xbc, 0x80, 0xe5, 0xd4, 0x0e, 0xdf, 0x81,
	0xdb, 0xa7, 0x83, 0x6e, 0xff, 0xbc, 0xf7, 0xbc, 0x7f, 0xd4, 0x7d, 0xde, 0x3d, 0x1e, 0x3c, 0x1a,
	0xf4, 0x4e, 0x8e, 0xcf, 0x8f, 0x4f, 0x06, 0xe7, 0xcf, 0x4e, 0xce, 0x8e, 0x9f, 0xa2, 0x1b, 0x42,
	0xe5, 0xe9, 0x59, 0xff, 0xa8, 0xf7, 0xe4, 0xd1, 0xa0, 0x7b, 0x6e, 0x50, 0x46, 0x35, 0xe7, 0x7b,
	0x68, 0x9d, 0x26, 0x5e, 0xcc, 0x0a, 0x84, 0x03, 0x3f, 0x86, 0x06, 0x17, 0xf2, 0x1c, 0x57, 0xd9,
	0x37, 0xe7, 0x7b, 0xa6, 0x47, 0xb3, 0x46, 0x0e, 0x06, 0x24, 0xce, 0x2e, 0x3a, 0x3e, 0xa5, 0x48,
	0x0f, 0x60, 0x3d, 0x23, 0x53, 0x77, 0xd0, 0x82, 0x45, 0x71, 0x53, 0x9c, 0xd4, 0x64, 0x7f, 0x4e,
	0x17, 0xce, 0x1e, 0xec, 0xea, 0xa6, 0x7f, 0xea, 0xc6, 0xee, 0x69, 0x1c, 0x44, 0xac, 0xe7, 0x7b,
	0xb1, 0x86, 0x6a, 0x03, 0x11, 0x03, 0xc8, 0xb8, 0x77, 0x0b, 0x76, 0x64, 0x58, 0xc6, 0xcd, 0x6f,
	0x61, 0x3d, 0xad, 0xab, 0x7e, 0xc0, 0x3d, 0x71, 0x6c, 0xbc, 0x0f, 0x8d, 0x60, 0x32, 0xd2, 0x4b,
	0x79, 0xe0, 0x45, 0x9a, 0x15, 0x09, 0x0d, 0x9f, 0xbd, 0x4b, 0x35, 0xa6, 0x95, 0x9a, 0x15, 0x39,
	0x7f, 0xd7, 0xa0, 0x49, 0xd9, 0x85, 0x3b, 0x8c, 0x83, 0x48, 0xb7, 0xc0, 0x63, 0x58, 0x09, 0x26,
	0xa3, 0xb4, 0x26, 0x55, 0x26, 0xaf, 0xaa, 0xdc, 0x9c, 0x8d, 0xc0, 0xf0, 0xd9, 0xbb, 0x19, 0xc6,
	0xdc, 0x87, 0x61, 0x64, 0x6d, 0x70, 0x4f, 0xce, 0x0b, 0xf7, 0x52, 0x07, 0x3b, 0x1d, 0x86, 0x8d,
	0xc3, 0x3b, 0xd6, 0x0e, 0xd7, 0x9a, 0xb4, 0x60, 0xe8, 0x5c, 0x00, 0x9a, 0x9d, 0x72, 0xd6, 0x46,
	0x3c, 0x19, 0x0a, 0x32, 0xac, 0xdb, 0x48, 0x2d, 0xc5, 0xe5, 0xca, 0x0a, 0x57, 0xfd, 0x33, 0x5d,
	0x88, 0xe6, 0x12, 0xaf, 0x01, 0x7f, 0xf2, 0xca, 0xf5, 0xc7, 0xf2, 0x15, 0x10, 0x37, 0x9f, 0x93,
	0x39, 0x9f, 0x40, 0x53, 0xd7, 0x8a, 0xce, 0xe6, 0x6e, 0x76, 0x08, 0x4c, 0x27, 0x4a, 0xa6, 0xc9,
	0xc3, 0x59, 0xc1, 0xa5, 0x81, 0xdd, 0x83, 0x55, 0x8f, 0x0b, 0x69, 0x3f, 0x62, 0x9c, 0xf9, 0xb1,
	0x0a, 0x2f, 0x2f, 0xd4, 0x83, 0x4a, 0x3d, 0x56, 0xf3, 0x7a, 0x50, 0xe9, 0xc7, 0xea, 0x95, 0xcb,
	0x1f, 0x4d, 0x3c, 0x97, 0xeb, 0xc7, 0x4a, 0xaf, 0x9d, 0x87, 0xd0, 0x3e, 0xf3, 0x79, 0x12, 0x86,
	0x41, 0x14, 0xb3, 0x91, 0x9a, 0x0a, 0xd9, 0xa4, 0xa8, 0xb4, 0xaa, 0x58, 0xf5, 0xd2, 0xf9, 0x73,
	0x1b, 0x96, 0xf4, 0x0c, 0xe9, 0x42, 0x43, 0x89, 0xe5, 0x14, 0xa9, 0xc9, 0x29, 0x72, 0xb7, 0x78,
	0x2d, 0x4a, 0x5b, 0xff, 0x2b, 0x47, 0x47, 0xd6, 0x4e, 0xa4, 0x46, 0x2d, 0x7b, 0xd3, 0xc7, 0x68,
	0x9e, 0xce, 0x04, 0x78, 0x04, 0x84, 0x59, 0xf8, 0x97, 0x1a, 0xa6, 0x07, 0x56, 0xda, 0x53, 0xd0,
	0xa7, 0x56, 0x24, 0x1c, 0xc2, 0x2e, 0xaf, 0x60, 0xee, 0x72, 0xa4, 0x35, 0x0e, 0xff, 0x6f, 0x22,
	0x41, 0x56, 0x6f, 0x95, 0x88, 0xf8, 0x35, 0xb4, 0xb9, 0x95, 0xb8, 0x93, 0x45, 0xe9, 0xef, 0x7f,
	0x95, 0xfe, 0x72, 0x16, 0xb4, 0x02, 0x0d, 0xff, 0x0c, 0xfb, 0xfc, 0x0a, 0xce, 0x4e, 0x6e, 0x4a,
	0x8f, 0x9f, 0xda, 0x68, 0x9a, 0xf5, 0x94, 0x57, 0x22, 0xe3, 0x1f, 0x61, 0x8f, 0x57, 0x52, 0x77,
	0xb2, 0x24, 0x7d, 0x77, 0xae, 0xf4, 0x9d, 0x3f, 0xf1, 0x15, 0xa8, 0xf2, 0x4e, 0x2b, 0xd8, 0x3b,
	0xa9, 0x5b, 0xee, 0xb4, 0xc2, 0x86, 0x56, 0x22, 0xca, 0x3b, 0xb5, 0x92, 0x77, 0xb2, 0x6c, 0xb9,
	0x53, 0xab, 0x05, 0xad, 0x40, 0xc3, 0x14, 0x30, 0x2b, 0x91, 0x30, 0x02, 0x1f, 0xcc, 0x03, 0x0d,
	0xd6, 0xf8, 0x07, 0xd8, 0x62, 0xe6, 0xd8, 0x1b, 0x12, 0xf7, 0xbe, 0xb5, 0xd3, 0xf2, 0x71, 0x5b,
	0x50, 0xf0, 0x19, 0x6c, 0xf0, 0x32, 0xd9, 0x22, 0x2b, 0x12, 0xfc, 0x6e, 0x35, 0xfd, 0x98, 0x22,
	0x9b, 0xec, 0xf1, 0x77, 0xd0, 0xe2, 0x06, 0xaa, 0x42, 0x56, 0xcd, 0xdf, 0x29, 0x4c, 0xb4, 0x86,
	0x1a, 0x11, 0xb0, 0x0b, 0xdb, 0xcc, 0xfc, 0x5d, 0x84, 0xac, 0x49, 0xf0, 0xff, 0x56, 0xcd, 0x9e,
	0x8c, 0x3a, 0xb5, 0xe1, 0xe0, 0x23, 0x40, 0xbc, 0xc0, 0x35, 0x48, 0xd3, 0x4c, 0x5a, 0x8a, 0x9c,
	0x84, 0x96, 0x2c, 0xf1, 0x09, 0xac, 0xf3, 0x22, 0x4b, 0x21, 0x48, 0xc2, 0xdd, 0xa9, 0x80, 0x53,
	0x41, 0x96, 0x6d, 0x65, 0x6e, 0x0d, 0x34, 0x8b, 0xac, 0x5b, 0x72, 0x6b, 0xd0, 0xa5, 0x46, 0x04,
	0x51, 0xc0, 0x6f, 0x4a, 0x5f, 0xa2, 0x08, 0x36, 0x17, 0x70, 0xf9, 0x9b, 0x15, 0x35, 0x58, 0xcb,
	0x96, 0xaf, 0x60, 0x5e, 0x64, 0xc3, 0xd2, 0xf2, 0x15, 0x36, 0xb4, 0x12, 0x51, 0x3c, 0x4f, 0xdc,
	0xc2, 0xe5, 0x48, 0xcb, 0xfc, 0x3c, 0xd9, 0xb8, 0x1f, 0xb5, 0x22, 0xe1, 0x31, 0xec, 0x70, 0x1b,
	0x2b, 0x24, 0x9b, 0xd2, 0xcd, 0x03, 0xe3, 0x55, 0x18, 0xfd, 0xd8, 0xb1, 0x70, 0x0f, 0x9a, 0x3c,
	0xcf, 0x5c, 0xc8, 0x96, 0x84, 0xff, 0x8f, 0xad, 0x7a, 0x34, 0x68, 0xd1, 0x2e, 0x5b, 0xd8, 0x69,
	0x25, 0x6e, 0x57, 0x17, 0x76, 0x5a, 0x88, 0x25, 0x4b, 0x11, 0x58, 0x94, 0x27, 0xa8, 0x84, 0x98,
	0x03, 0x2b, 0xf0, 0x58, 0x5a, 0xb4, 0x13, 0x81, 0x45, 0x05, 0x16, 0x48, 0x76, 0xcc, 0x81, 0x15,
	0xd9, 0x22, 0x2d, 0x59, 0x8a, 0x99, 0x9f, 0x58, 0x89, 0x14, 0x69, 0x9b, 0x67, 0xbe, 0x9d, 0x7a,
	0xd1, 0x0a, 0x34, 0xe7, 0xaf, 0x05, 0x68, 0x64, 0x68, 0x14, 0xde, 0x84, 0xf5, 0xd2, 0x5b, 0x84,
	0x6e, 0xe0, 0x1d, 0xd8, 0x34, 0x12, 0x13, 0x54, 0xc3, 0xdb, 0xb0, 0x61, 0xe0, 0x10, 0x68, 0x0e,
	0xdf, 0x86, 0x1d, 0xeb, 0x53, 0x8f, 0xe6, 0xf1, 0x2d, 0xd8, 0xb6, 0xbc, 0xc6, 0x68, 0x41, 0xfa,
	0x33, 0x3d, 0x8b, 0x68, 0x51, 0xfa, 0x2b, 0xbf, 0x61, 0xe8, 0x26, 0x6e, 0x42, 0x23, 0xf3, 0x28,
	0xa1, 0x25, 0xbc, 0x01, 0xcd, 0xa2, 0x56, 0x5d, 0x9b, 0x17, 0x06, 0x3e, 0x5a, 0xc6, 0xc4, 0xfc,
	0xa3, 0x18, 0x81, 0x88, 0xd4, 0x32, 0x83, 0x51, 0x03, 0xb7, 0xca, 0x3f, 0xec, 0xd0, 0x8a, 0x48,
	0x63, 0x69, 0x16, 0xa2, 0x55, 0xbc, 0x65, 0xfa, 0x54, 0x8e, 0xd6, 0xa4, 0x6f, 0xc3, 0x40, 0x43,
	0x4d, 0x99, 0x08, 0xd3, 0xb0, 0x40, 0x48, 0xfa, 0x28, 0x76, 0x37, 0x5a, 0x17, 0x3e, 0xca, 0x7d,
	0x8a, 0xb0, 0xc8, 0x46, 0xa1, 0xc1, 0xd0, 0x46, 0x36, 0xfa, 0x34, 0xcc, 0x96, 0x50, 0x2d, 0x94,
	0x3c, 0xda, 0x14, 0xaa, 0xc5, 0xda, 0x45, 0x5b, 0x78, 0xaf, 0x8a, 0xf4, 0xa3, 0xed, 0xc7, 0xeb,
	0xbf, 0xcf, 0xad, 0x7d, 0x25, 0x2b, 0x55, 0xed, 0xf1, 0x97, 0x37, 0xe5, 0x7f, 0x1b, 0x7c, 0xf6,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x6c, 0x35, 0x86, 0x64, 0x18, 0x00, 0x00,
}
