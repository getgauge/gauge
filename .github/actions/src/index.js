/*----------------------------------------------------------------
 *  Copyright (c) ThoughtWorks, Inc.
 *  Licensed under the Apache License, Version 2.0
 *  See LICENSE in the project root for license information.
 *----------------------------------------------------------------*/

const core = require("@actions/core"),
  github = require("@actions/github"),
  Adm = require("adm-zip"),
  commentHeader =
    "<!-- Autogenerated Comment. Do not edit. This comment was generated by post-benchmarks action -->";

var inputs = {
  secret: core.getInput("token"),
  workFlowFileName: core.getInput("workflow_file_name"),
  artifactName: core.getInput("artifact_name"),
  fileName: core.getInput("file_name"),
};

(async (opts) => {
  try {
    let octokit = github.getOctokit(opts.secret);
    let repo = {
      owner: "getgauge",
      repo: "gauge",
    };
    var openPRs = await octokit.pulls.list({ ...repo, state: "open" });
    let workflows = await octokit.actions.listRepoWorkflows(repo);
    let workflowId = workflows.data.workflows.find(
      (x) => x.path === opts.workFlowFileName
    ).id;
    let runs = await octokit.actions.listWorkflowRuns({
      ...repo,
      workflow_id: workflowId,
    });
    openPRs.data.forEach(async (p) => {
      try {
        var match = runs.data.workflow_runs.find(
          (w) => w.head_sha === p.head.sha
        );
        if (match) {
          let artifacts = await octokit.actions.listWorkflowRunArtifacts({
            ...repo,
            run_id: match.id,
          });
          var benchmarkArtifact = artifacts.data.artifacts.find(
            (a) => a.name === opts.artifactName
          );
          if (benchmarkArtifact) {
            const zip = await octokit.actions.downloadArtifact({
              ...repo,
              artifact_id: benchmarkArtifact.id,
              archive_format: "zip",
            });
            var adm = new Adm(Buffer.from(zip.data));
            var comment = `${commentHeader}
${adm.readAsText(adm.getEntry(opts.fileName))}

---
See [Workflow log](${match.html_url}) for more details.`;
            var prComments = (
              await octokit.issues.listComments({
                ...repo,
                issue_number: p.number,
              })
            ).data;
            console.log(prComments);
            var existingBenchmarkComment = prComments.find(
              (c) => c.body.split("\n")[0] === commentHeader
            );
            if (existingBenchmarkComment) {
              core.info(
                `updating comment ${existingBenchmarkComment.html_url}`
              );
              await octokit.issues.updateComment({
                ...repo,
                comment_id: existingBenchmarkComment.id,
                body: comment,
              });
            } else {
              core.info(`adding comment to ${p.html_url}`);
              await octokit.issues.createComment({
                ...repo,
                issue_number: p.number,
                body: comment,
              });
            }
          } else {
            core.info(
              `no benchmark result found for run ${match.url} (PR #${p.id})`
            );
          }
        }
      } catch (error) {
        core.error(error);
      }
    });
  } catch (error) {
    core.setFailed(error.message);
  }
})(inputs);
