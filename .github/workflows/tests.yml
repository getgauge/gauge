name: build
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  # tests:
  #   name: UTs ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest, ubuntu-latest, macos-latest]

  #   steps:
  #     - name: Set up Go 1.13
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.13
  #       id: go

  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v2

  #     - name: Test
  #       run: go run build/make.go --test --verbose

  # lsp-tests:
  #   needs: tests
  #   name: lsp-tests ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [windows-latest, ubuntu-latest]
  #   steps:
  #     - name: Set up Go 1.13
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.13
  #       id: go

  #     - name: Set up Nodejs
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: '12.x'

  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v2

  #     - name: Build
  #       run: |
  #         go run build/make.go --verbose

  #     - name: Clone LSP tests
  #       run: |
  #         git clone https://github.com/getgauge/gauge-lsp-tests
  #         cd gauge-lsp-tests
  #         npm install

  #     - name: Install Gauge (windows)
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         go run build/make.go --install  --verbose
  #         echo "::add-path::C:\\Program Files\\gauge\\bin"


  #     - name: Install Gauge (linux)
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         go run build/make.go --install --prefix=/tmp/gauge --verbose
  #         echo "::add-path::/tmp/gauge/bin"

  #     - name: Prep gauge-js
  #       run: |
  #         git clone https://github.com/getgauge/gauge-js.git
  #         cd gauge-js
  #         npm install
  #       shell: bash

  #     - name: Install gauge-js
  #       run: |
  #         cd gauge-js
  #         npm run installPlugin

  #     - name: Run lsp-tests
  #       run: |
  #         cd gauge-lsp-tests
  #         gauge install
  #         gauge run --tags="!knownIssue & (actions_on_project_load | actions_on_file_edit)" --env=js-wd

  # functional-tests:
  #   needs: tests
  #   name: FTs ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     TAGS: js
  #   strategy:
  #     matrix:
  #       os: [windows-latest, ubuntu-latest]
  #   steps:
  #     - name: Set up Go 1.13
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.13
  #       id: go

  #     - name: Setup java
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 11

  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v2

  #     - name: Build
  #       run: go run build/make.go --verbose

  #     - name: Install Gauge (windows)
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         go run build/make.go --install  --verbose
  #         echo "::add-path::C:\\Program Files\\gauge\\bin"

  #     - name: Install Gauge (linux)
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         go run build/make.go --install --prefix=/tmp/gauge --verbose
  #         echo "::add-path::/tmp/gauge/bin"

  #     - name: Clone gauge-java
  #       run: |
  #         git clone https://github.com/getgauge/gauge-java

  #     - name: Install Gauge Java plugin from source
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         cd gauge-java
  #         ./build.sh forceinstall

  #     - name: Install Gauge Java plugin from source
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         cd gauge-java
  #         ./build.ps1 forceinstall

  #     - name: Install Gauge Java maven package locally
  #       run: |
  #         cd gauge-java
  #         mvn -q install -DskipTests -"Dgpg.skip" -D"maven.javadoc.skip=true"

  #     - name: Prep gauge-js
  #       run: |
  #         git clone https://github.com/getgauge/gauge-js.git
  #         cd gauge-js
  #         npm install
  #       shell: bash

  #     - name: Install gauge-js
  #       run: |
  #         cd gauge-js
  #         npm run installPlugin

  #     - name: Prep html-report
  #       run: |
  #         git clone https://github.com/getgauge/html-report
  #         cd html-report
  #         go run build/make.go && go run build/make.go --install
  #       shell: bash


  #     - name: Prep FTs
  #       run: |
  #         git clone https://github.com/getgauge/gauge-tests
  #         cd gauge-tests
  #         gauge install

  #     - name: Install gauge and Run FTs (windows)
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         cd gauge-tests
  #         .\gradlew.bat clean jsFT
  #       shell: pwsh

  #     - name: Install gauge and Run FTs (linux/osx)
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         cd gauge-tests
  #         ./gradlew clean jsFT

  #     - name: Upload logs
  #       uses: actions/upload-artifact@v1
  #       if: failure()
  #       with:
  #         name: ft-logs-${{ matrix.os }}
  #         path: gauge-tests/logs

  # build:
  #   name: Build ${{ matrix.os }} artifacts
  #   runs-on: ${{ matrix.os }}
  #   needs: [ functional-tests, lsp-tests ]
  #   strategy:
  #     matrix:
  #       os: [windows-latest, ubuntu-latest, macos-latest]

  #   steps:
  #     - name: Set up Go 1.13
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.13
  #       id: go

  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v2

  #     - name: Build distro for ${{ matrix.os }}
  #       run: go run build/make.go  && go run build/make.go --distro

  #     - name: Upload artifacts for ${{ matrix.os }}
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: gauge-artifact-for-${{ matrix.os }}
  #         path: deploy

  benchmark:
    name: Benchmark ${{ matrix.project }} | PARALLEL= ${{ matrix.parallel }}
    runs-on: ubuntu-latest
    # needs: [ functional-tests, lsp-tests ]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        project: [java_simple, java_maven, java_gradle]
        parallel: [true, false, multithreaded]

    env:
      PARALLEL: ${{ matrix.parallel }}
      BENCHMARK_OUT_DIR: "docs/data/gauge"
      GITHUB_TOKEN: '${{ secrets.GAUGEBOT_GITHUB_TOKEN }}'

    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install Gauge
        run: |
          go run build/make.go && go run build/make.go --install --prefix=/tmp/gauge --verbose
          echo "::add-path::/tmp/gauge/bin"

      - name: Install gauge-java
        run: gauge install java

      - name: Prep benchmark
        run: |
          git clone https://github.com/getgauge-contrib/gauge-benchmarks

      - name: Run benchmark ${{matrix.project}} | Multithreaded
        if: matrix.parallel == 'multithreaded'
        env:
          PARALLEL: true
          enable_multithreading: true
        run: |
          cd gauge-benchmarks/${{matrix.project}}
          ./run.sh

      - name: Run benchmark ${{matrix.project}} | PARALLEL=${{matrix.parallel}}
        if: matrix.parallel != 'multithreaded'
        run: |
          cd gauge-benchmarks/${{matrix.project}}
          ./run.sh

      - name: Upload benchmark | multithreaded
        uses: actions/upload-artifact@v1
        if: success() && matrix.parallel == 'multithreaded'
        with:
          name: ${{matrix.project}}_parallel_multithreaded.csv
          path: gauge-benchmarks/docs/data/gauge/${{matrix.project}}_parallel_multithreaded.csv

      - name: Upload benchmark | multithreaded
        uses: actions/upload-artifact@v1
        if: success() && matrix.parallel == 'true'
        with:
          name: ${{matrix.project}}_parallel.csv
          path: gauge-benchmarks/docs/data/gauge/${{matrix.project}}_parallel.csv

      - name: Upload benchmark | multithreaded
        uses: actions/upload-artifact@v1
        if: success() && matrix.parallel == 'false'
        with:
          name: ${{matrix.project}}_serial.csv
          path: gauge-benchmarks/docs/data/gauge/${{matrix.project}}_serial.csv

  publish-benchmark:
    name: Publish Benchmark
    runs-on: ubuntu-latest
    needs: [ benchmark ]
    if: github.event_name == 'pull_request'

    steps:
      - name: Prep benchmark
        run: |
          git clone https://github.com/getgauge-contrib/gauge-benchmarks

      - name: Download benchmark results
        uses: actions/download-artifact@v1
        with:
          name: *.csv
          path: gauge-benchmarks/out

      - name: List
        runs: ls -R gauge-benchmarks/out

      # - name: Commit and Push results
      #   run: |
      #     cd gauge-benchmarks
      #     git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
      #     git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
      #     git add docs/data
      #     git commit -sm "add benchmark for $GITHUB_REF"

      # - name: Step that prints name of pull request's base branch
      #   run: |
      #     echo "Pull request's base branch is: ${BASE_BRANCH}"
      #   env:
      #     BASE_BRANCH: ${{ github.event.pull_request.head.ref }}

      # - name: Commit and Push results
      #   run: |
      #     git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
      #     git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
      #     git add benchmarks
      #     git commit -s -m "add benchmark for $GITHUB_REF"
      #     git push "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY" $GITHUB_BASE_REF
