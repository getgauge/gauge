name: Deploy

on: deployment

jobs:
  package:
    if: github.event.deployment.environment == 'production'
    name: Create package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Compile gauge
        run: go run build/make.go --all-platforms  --skip-windows

      - name: Create distro
        run: |
          go run build/make.go --distro --all-platforms --skip-windows

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: gauge-non-windows-artifact
          path: ./deploy

  windows-package:
    needs: [package]
    name: Create windows package
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Prep installer generation
        shell: powershell
        env:
          SIGNING_CERT: ${{ secrets.WINDOWS_SIGNING_CERT }}
        run: |
          Start-Sleep -Milliseconds 1
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-WebRequest "https://sourceforge.net/projects/nsis/files/NSIS%203/3.06.1/nsis-3.06.1-strlen_8192.zip/download" -UseBasicParsing -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -Outfile "./nsis.zip"
          Expand-Archive -Force -LiteralPath ./nsis.zip -DestinationPath "C:\Program Files (x86)\NSIS\"
          echo "::add-path::C:\Program Files (x86)\Windows kits\10\App Certification Kit\"
          [IO.File]::WriteAllBytes('.\cert.p12', [Convert]::FromBase64String($Env:SIGNING_CERT))
          echo "CERT_FILE=$Env:GITHUB_WORKSPACE/cert.p12" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Compile gauge
        run: |
          go run build/make.go --verbose --all-platforms
          Get-ChildItem -Recurse .\bin

      - name: Sign
        shell: pwsh
        run: |
          .\build\sign_windows_artifacts.ps1

      - name: Cleanup
        if: always()
        run: rm $Env:CERT_FILE

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: gauge-windows-artifact
          path: ./deploy

  github-release:
    name: Publish github release
    runs-on: ubuntu-latest
    needs: [windows-package]
    env:
      GITHUB_TOKEN: '${{ secrets.GAUGEBOT_GITHUB_TOKEN }}'
    steps:
      - uses: actions/checkout@v2

      - uses: geertvdc/setup-hub@master

      - uses: actions/download-artifact@v1
        with:
          name: gauge-non-windows-artifact
          path: ./deploy

      - uses: actions/download-artifact@v1
        with:
          name: gauge-windows-artifact
          path: ./deploy

      - name: update release note
        run: |
          cd deploy
          version=$(ls gauge-*-linux.x86.zip |  sed 's/gauge-//' | sed 's/-linux.*//')
          if [ -z "$version" ]; then
              echo "Gauge version is not set"
              exit 1
          fi
          echo -e "Gauge v$version\n\n" > desc.txt
          release_description=$(ruby -e "$(curl -sSfL https://github.com/getgauge/gauge/raw/master/build/create_release_text.rb)" getgauge gauge)
          echo "$release_description" >> desc.txt
          echo "Creating new draft for release v$version"

          hub release create -F ./desc.txt "v$version"
          echo "Start uploading artifacts"
          for artifact in `ls gauge-*`; do
              hub release edit -m "" -a $artifact v$version
          done

          cat desc.txt

          rm -rf desc.txt

          echo $version > ../version.txt

      - name: upload gauge version
        uses: actions/upload-artifact@v1
        with:
          name: gauge-version
          path: ./version.txt

  pypi-release:
    runs-on: ubuntu-latest
    needs: [github-release]
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Fetch gauge version
        uses: actions/download-artifact@v1
        with:
          name: gauge-version
          path: .

      - name: Set gauge version
        run: echo "GAUGE_VERSION=`cat version.txt`" >> $GITHUB_ENV

      - name: Deploy to pypi
        env:
          PYPI_USER: ${{ secrets.PYPI_USER }}
          GAUGE_PACKAGE_NAME: getgauge-cli
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          cd build/pip
          pip install requests --user
          python build.py --dist
          pip install twine --user
          gauge_package=`ls dist/$GAUGE_PACKAGE_NAME-$GAUGE_VERSION.tar.gz`
          python -m twine upload -u $PYPI_USER -p $PYPI_PASSWORD $gauge_package

  npm-release:
    needs: [github-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - uses: actions/setup-node@v1
        with:
          node-version: '10.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Fetch gauge version
        uses: actions/download-artifact@v1
        with:
          name: gauge-version
          path: .

      - name: Set gauge version
        run: echo "GAUGE_VERSION=`cat version.txt`" >> $GITHUB_ENV

      - name: Setup Git User
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"

      - name: Deploy npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd build/npm
          npm version $GAUGE_VERSION
          npm publish --access=public

  deb-rpm-release:
    needs: [github-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Set up Ruby 2.6.x
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Install fpm
        run: |
          gem install --no-document fpm

      - name: Prepare deb artifact
        run: |
          build/mkdeb.sh

      - name: Deploy debian
        env:
          REPO: gauge-deb
          PACKAGE: gauge
          DISTRIBUTIONS: stable
          COMPONENTS: main
          USER: ${{ secrets.BINTRAY_API_USER }}
          API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          PASSPHRASE: ${{ secrets.BINTRAY_GPG_SIGNING_PASSPHRASE }}
        run: |
          cd deploy
          sh ../build/publish_deb_to_bintray.sh

      - name: Deploy rpm
        env:
          REPO: gauge-rpm
          PACKAGE: gauge
          BINTRAY_PACKAGE: gauge-stable
          USER: ${{ secrets.BINTRAY_API_USER }}
          API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          PASSPHRASE: ${{ secrets.BINTRAY_GPG_SIGNING_PASSPHRASE }}
        run: |
          cd deploy
          for artifact in `ls gauge-*.deb`; do
            fpm -t rpm -s deb $artifact
          done
          for artifact in `ls gauge-*.rpm`; do
            output_package=`echo "$artifact" | sed 's/-[0-9].x/-all.x/' | sed 's/-[0-9].i/-all.i/'`
            mv -T $artifact $output_package
          done
          ls
          sh ../build/publish_rpm_to_bintray.sh

  choco-release:
    needs: [github-release]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Fetch gauge version
        uses: actions/download-artifact@v1
        with:
          name: gauge-version
          path: .

      - name: Set gauge version
        run: echo "GAUGE_VERSION=`cat version.txt`" >> $GITHUB_ENV
        shell: bash

      - name: Clone chocolatey-packages
        run: |
          git clone https://github.com/getgauge/chocolatey-packages

      - name: Deploy to Gauge $GAUGE_VERSION to choco
        shell: pwsh
        env:
          API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          cd chocolatey-packages
          $Env:GAUGE_VERSION | Set-Content version
          cd gauge
          ./package.ps1
          choco push "gauge.$Env:GAUGE_VERSION.nupkg" -k $Env:API_KEY

  brew-release:
    needs: [github-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - uses: geertvdc/setup-hub@master

      - name: Set up Ruby 2.6.x
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x

      - name: Fetch gauge version
        uses: actions/download-artifact@v1
        with:
          name: gauge-version
          path: .

      - name: Set gauge version
        run: echo "GAUGE_VERSION=`cat version.txt`" >> $GITHUB_ENV

      - name: Update brew formula
        env:
          HOMEBREW_GITHUB_USER_NAME: ${{ secrets.HOMEBREW_GITHUB_USER_NAME }}
          HOMEBREW_GITHUB_USER_EMAIL: ${{ secrets.HOMEBREW_GITHUB_USER_EMAIL }}
          GITHUB_TOKEN: ${{ secrets.GAUGEBOT_GITHUB_TOKEN }}
        run: |
          cd build/brew
          bash create_brew_pr.sh
